package com.intiformation.gestion.dao;

import java.sql.PreparedStatement;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.intiformation.gestion.model.Client;

public class ClientDAOImpl implements IClientDAO{

	/*===========================================================================*/
	/*===========================================================================*/
	
	
	@Override
	public List<Client> getAll() {
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetAll="SELECT * FROM clients";
			ps = this.connection.prepareStatement(requeteSqlGetAll);
			
			resultatRequete = ps.executeQuery();

			Client client = null;
			
			List<Client> listeClient = new ArrayList <>();

			while (resultatRequete.next()) {
				int idClient = resultatRequete.getInt(1);
				String nom = resultatRequete.getString(2);
				String prenom = resultatRequete.getString(3);
				String adresse = resultatRequete.getString(4);
				String ville = resultatRequete.getString(5);
				int codePostal = resultatRequete.getInt(6);
				String telephone = resultatRequete.getString(7);

				client = new Client(idClient, nom, prenom, adresse, ville, codePostal, telephone);
				
				listeClient.add(client);
				
			}//end while
			return listeClient;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}// end getAll()

	
	@Override
	public List<Integer> getAllID(){
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetAll="SELECT id_client FROM clients";
			ps = this.connection.prepareStatement(requeteSqlGetAll);
			
			resultatRequete = ps.executeQuery();

			Client client = null;
			
			List<Integer> listeIDClient = new ArrayList <>();

			while (resultatRequete.next()) {
				int idClient = resultatRequete.getInt(1);
				
				listeIDClient.add(idClient);
				
			}//end while
			return listeIDClient;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}// end getAllID()
		
	/*===========================================================================*/
	/*===========================================================================*/
	
	
	@Override
	public Client getByID(int id) {
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetById="SELECT * FROM clients WHERE id_client = ?";
			ps = this.connection.prepareStatement(requeteSqlGetById);
			ps.setInt(1, id);
			
			resultatRequete = ps.executeQuery();
			Client client = null;
			
			resultatRequete.next();
			int idClient = resultatRequete.getInt(1);
			String prenom = resultatRequete.getString(2);
			String nom = resultatRequete.getString(3);
			String adresse = resultatRequete.getString(4);
			String ville = resultatRequete.getString(5);
			int codePostal = resultatRequete.getInt(6);
			
			String telephone = resultatRequete.getString(7);

			client = new Client(idClient, nom, prenom, adresse, ville, codePostal, telephone);
			
			return client;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
		
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	
	/*===========================================================================*/
	/*===========================================================================*/
	
	
	@Override
	public boolean add(Client client) {
		
		PreparedStatement ps = null;
		
		try {
			String requeteSqlAdd= "INSERT INTO  clients ( prenom , nom, adresse, codePostal,ville, telephone) VALUES (?, ?, ?, ?, ?, ? )";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);
			
			ps.setString(1, client.getPrenom());
			ps.setString(2, client.getNom());
			ps.setString(3, client.getAdresse());
			ps.setInt (4, client.getCodePostal());
			ps.setString(5, client.getVille());
			ps.setString(6, client.getTelephone());

			int verifAjout = ps.executeUpdate();

			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
	}

	/*===========================================================================*/
	/*===========================================================================*/
	
	@Override
	public boolean update(Client client) {
		
		PreparedStatement ps = null;
		
		try {
	
			String requeteSqlAdd= "UPDATE clients SET prenom = ?, nom =?, adresse=?, codePostal=?,ville=?, telephone=? WHERE id_client= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);
		
			ps.setString(1, client.getPrenom());
			ps.setString(2, client.getNom());
			ps.setString(3, client.getAdresse());
			ps.setInt (4, client.getCodePostal());
			ps.setString(5, client.getVille());
			ps.setString(6, client.getTelephone());
			
			ps.setInt(7, client.getIdClient());
			

			int verifAjout = ps.executeUpdate();
			
			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
	}
	
	/*===========================================================================*/
	/*===========================================================================*/

	@Override
	public boolean delete(int id) {
		PreparedStatement ps = null;
		
		
		try {
			
			String requeteSqlDelete= "DELETE FROM clients WHERE id_client=?";
			
			ps = this.connection.prepareStatement(requeteSqlDelete);
			
			ps.setInt(1, id);

			int verifdelete = ps.executeUpdate();

			return (verifdelete==1);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		

		return false;
	}


	@Override
	public List<Client> getAllClients() {
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetAll="SELECT * FROM clients";
			ps = this.connection.prepareStatement(requeteSqlGetAll);
			
			resultatRequete = ps.executeQuery();

			Client client = null;
			
			List<Client> listeClient = new ArrayList <>();

			while (resultatRequete.next()) {
				int idClient = resultatRequete.getInt(1);
				String nom = resultatRequete.getString(2);
				String prenom = resultatRequete.getString(3);
				String adresse = resultatRequete.getString(4);
				String ville = resultatRequete.getString(5);
				int codePostal = resultatRequete.getInt(6);
				
				String telephone = resultatRequete.getString(7);

				client = new Client(idClient, nom, prenom, adresse, ville, codePostal, telephone);
				
				listeClient.add(client);
				
			}//end while
			return listeClient;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}


	@Override
	public void ajouterClient(Client client) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void modifierClient(Client client) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void supprimerClientById(int pIdClient) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public Client getClientById(int pIdClient) {
		// TODO Auto-generated method stub
		return null;
	}


	
}// end class
