package com.intiformation.gestion.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.intiformation.gestion.model.Client;
import com.intiformation.gestion.model.Compte;
import com.intiformation.gestion.model.CompteCourant;
import com.intiformation.gestion.model.CompteEpargne;

public class ConseillerDAOImpl implements IConseillerDAO{

	@Override
	public List<Compte> getAll() {
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetAll="SELECT * FROM comptes";
			ps = this.connection.prepareStatement(requeteSqlGetAll);
			
			resultatRequete = ps.executeQuery();

			Compte compte = null;
			
			List<Compte> listeCompte = new ArrayList <>();

			while (resultatRequete.next()) {
				int idCompte = resultatRequete.getInt(1);
				int clientID = resultatRequete.getInt(2);
				double solde = resultatRequete.getDouble(3);
				String typeCompte = resultatRequete.getString(4);
				double taux = resultatRequete.getInt(5);
				double decouvert  = resultatRequete.getInt(6);

				
				if (typeCompte.equals("epargne")) {
					compte = new CompteEpargne(idCompte, solde, clientID, taux);
				}else {
					compte = new CompteCourant(idCompte, solde, clientID, decouvert);
				}
				
				listeCompte.add(compte);
				
			}//end while
			return listeCompte;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	@Override
	public List<Integer> getAllID() {
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetAll="SELECT id_compte FROM comptes";
			ps = this.connection.prepareStatement(requeteSqlGetAll);
			
			resultatRequete = ps.executeQuery();
			
			List<Integer> listeIDCompte = new ArrayList <>();

			while (resultatRequete.next()) {
				int idCompte = resultatRequete.getInt(1);
				
				listeIDCompte.add(idCompte);
				
			}//end while
			return listeIDCompte;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	@Override
	public Compte getByID(int id) {
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetById="SELECT * FROM comptes WHERE id_compte = ?";
			ps = this.connection.prepareStatement(requeteSqlGetById);
			ps.setInt(1, id);
			
			resultatRequete = ps.executeQuery();
			Compte compte = null;
			
			resultatRequete.next();
			
			int idCompte = resultatRequete.getInt(1);
			int clientID = resultatRequete.getInt(2);
			double solde = resultatRequete.getDouble(3);
			String typeCompte = resultatRequete.getString(4);
			double taux = resultatRequete.getInt(5);
			double decouvert  = resultatRequete.getInt(6);


			if (typeCompte.equals("epargne")) {
				compte = new CompteEpargne(idCompte, solde, clientID, taux);
			}else {
				compte = new CompteCourant(idCompte, solde, clientID, decouvert);
			}
			
			return compte;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
		
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	
	@Override
	public boolean delete(int id) {
PreparedStatement ps = null;
		
		
		try {
			
			String requeteSqlDelete= "DELETE FROM comptes WHERE id_compte=?";
			
			ps = this.connection.prepareStatement(requeteSqlDelete);
			
			ps.setInt(1, id);

			int verifdelete = ps.executeUpdate();

			return (verifdelete==1);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
	}

	@Override
	public List<Compte> getCompteByIDClient(int idClient) {
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetById="SELECT * FROM comptes WHERE client_id = ?";
			ps = this.connection.prepareStatement(requeteSqlGetById);
			ps.setInt(1, idClient);
			
			resultatRequete = ps.executeQuery();
			Compte compte = null;
			List<Compte> listeCompte = new ArrayList <>();

			while (resultatRequete.next()) {
				int idCompte = resultatRequete.getInt(1);
				int clientID = resultatRequete.getInt(2);
				double solde = resultatRequete.getDouble(3);
				String typeCompte = resultatRequete.getString(4);
				double taux = resultatRequete.getInt(5);
				double decouvert  = resultatRequete.getInt(6);


				if (typeCompte.equals("epargne")) {
					compte = new CompteEpargne(idCompte, solde, clientID, taux);
				}else {
					compte = new CompteCourant(idCompte, solde, clientID, decouvert);
				}
				
				listeCompte.add(compte);
				
			}//end while
			return listeCompte;
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
		
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	@Override
	public boolean setClient(int id_compte, int idClient) {
PreparedStatement ps = null;
		
		try {
			String requeteSqlAdd= "UPDATE comptes SET client_id=? WHERE id_compte= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);
			

			ps.setDouble(1, idClient);
			ps.setInt(2, id_compte);
			
			int verifAjout = ps.executeUpdate();

			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
	}

	@Override
	public boolean deposit(Compte compte, double montant) {
		PreparedStatement ps = null;
		double solde = compte.getSolde();
		int id_compte = compte.getIdCompte();
		
		try {
			String requeteSqlAdd= "UPDATE comptes SET solde=? WHERE id_compte= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);
			
			ps.setDouble(1, solde+montant);
			ps.setInt(2, id_compte);

			int verifAjout = ps.executeUpdate();

			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
	}

	@Override
	public boolean add(Compte t) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean update(Compte t) {
		// TODO Auto-generated method stub
		return false;
	}

	

	@Override
	public boolean isConseillerExists(String pMail, String pMdp) {
		PreparedStatement ps = null;
		ResultSet rs =null;
		try {
		// 1. requête SQL
		String isExistsReq = "SELECT COUNT(id_conseiller) FROM conseiller WHERE email=? AND mot_de_passe=?";
		
		// 2. requête préparée
		
			ps = this.connection.prepareStatement(isExistsReq);
			
		// 2. 1 passage de param
			ps.setString(1, pMail);
			ps.setString(2, pMdp);
			
			// exécution  + récup rés
			rs = ps.executeQuery();
			
			// 4. lecture du résultat
			rs.next();
			int verifIsExists =rs.getInt(1);
			
			//5. renvoi du résultat
			return (verifIsExists == 1)?true:false;
			
		} catch (SQLException e) {
			System.out.println("... erreur exécution requête isConseillerExists...");
			e.printStackTrace();
		}
		
		
		return false;
	}//end isConseillerExists()
	
	/*=============================================================================================================*/
	/*==================================COMPTE EPARGNE=============================================================*/
public boolean add(CompteEpargne compteEpargne) {
		
		PreparedStatement ps = null;
		
		try {
			String requeteSqlAdd= "INSERT INTO  comptes ( client_id , solde, type_compte, taux, decouvert) VALUES (?, ?, ?, ?, null)";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);
			
			ps.setInt(1, compteEpargne.getClientID());
			ps.setDouble(2, compteEpargne.getSolde());
			ps.setString(3, compteEpargne.getTypeCompte());
			ps.setDouble(4, compteEpargne.getTaux());

			int verifAjout = ps.executeUpdate();

			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
	}

	/*===========================================================================*/
	/*===========================================================================*/
	

	public boolean update(CompteEpargne compteEpargne) {
		
		PreparedStatement ps = null;
		
		try {
			String requeteSqlAdd= "UPDATE comptes SET client_id=? , solde=?, type_compte='epargne', taux=? WHERE id_compte= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);
			
			ps.setInt(1, compteEpargne.getClientID());
			ps.setDouble(2, compteEpargne.getSolde());
			ps.setDouble(3, compteEpargne.getTaux());
			
			ps.setInt(4, compteEpargne.getIdCompte());

			int verifAjout = ps.executeUpdate();

			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
	}
	
	/*===========================================================================*/
	/*===========================================================================*/

	public boolean retrait(Compte compteEpargne, double montant) {
		
		PreparedStatement ps = null;
		double solde = compteEpargne.getSolde();
		int id_compte = compteEpargne.getIdCompte();

		if(montant<(solde)) {
		
		try {
			String requeteSqlAdd= "UPDATE comptes SET solde=? WHERE id_compte= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);

			
			ps.setDouble(1, solde-montant);
			ps.setInt(2, id_compte);

			int verifAjout = ps.executeUpdate();

			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}//end try catch
		}//end if 
		else {
			System.out.println("Le montant demandé est trop élevé");
		}
		return false;

	}
	
	
	public boolean transfertEp(Compte compteDonneurEpargne, double montant, Compte compteReceveur) {
		PreparedStatement ps = null;
		
		double soldeReceveur = compteReceveur.getSolde();
		int id_compteReceveur = compteReceveur.getIdCompte();
		
		
		double soldeDonneur = compteDonneurEpargne.getSolde();
		int id_compteDonneur = compteDonneurEpargne.getIdCompte();
		
		if(montant<(soldeDonneur)) {
		
		try {
			String requeteSqlRemove= "UPDATE comptes SET solde=? WHERE id_compte= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlRemove);

			ps.setDouble(1, soldeDonneur-montant);
			ps.setInt(2, id_compteDonneur);

			int verifTransfertDonneur = ps.executeUpdate();
			
			String requeteSqlAdd= "UPDATE comptes SET solde=? WHERE id_compte= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);

			ps.setDouble(1, soldeReceveur+montant);
			ps.setInt(2, id_compteReceveur);

			int verifTransfertReceveur = ps.executeUpdate();

			return (verifTransfertDonneur+verifTransfertReceveur==2);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}//end try catch
		}//end if 
		else {
			System.out.println("Le montant demandé est trop élevé");
		}
		return false;

	}

	public CompteEpargne getByIDCompteEp(int id) {
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetById="SELECT * FROM comptes WHERE id_compte = ?";
			ps = this.connection.prepareStatement(requeteSqlGetById);
			ps.setInt(1, id);
			
			resultatRequete = ps.executeQuery();
			CompteEpargne compte = null;
			
			resultatRequete.next();
			
			int idCompte = resultatRequete.getInt(1);
			int clientID = resultatRequete.getInt(2);
			double solde = resultatRequete.getDouble(3);
			String typeCompte = resultatRequete.getString(4);
			double taux = resultatRequete.getInt(5);
			double decouvert  = resultatRequete.getInt(6);


			if (typeCompte.equals("epargne")) {
				compte = new CompteEpargne(idCompte, solde, clientID, taux);
			}else {
				System.out.println("Le compte "+ idCompte + "n'est pas un compte epargne.");
			}
			
			return compte;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
		
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}
	
	/*=============================================================================================================*/
	/*==================================COMPTE COURANT=============================================================*/
public boolean add(CompteCourant compteCourant) {
		
		PreparedStatement ps = null;
		
		try {
			String requeteSqlAdd= "INSERT INTO  comptes ( client_id , solde, type_compte, taux, decouvert) VALUES (?, ?, ?, null, ?)";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);
			
			ps.setInt(1, compteCourant.getClientID());
			ps.setDouble(2, compteCourant.getSolde());
			ps.setString(3, compteCourant.getTypeCompte());
			ps.setDouble(4, compteCourant.getDecouvert());

			int verifAjout = ps.executeUpdate();

			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
	}
	
	
	
	
	/*===========================================================================*/
	/*===========================================================================*/
	

	public boolean update(CompteCourant compteCourant) {
		
		PreparedStatement ps = null;
		
		try {
			String requeteSqlAdd= "UPDATE comptes SET client_id=? , solde=?, type_compte='courant' , decouvert=? WHERE id_compte= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);
			
			ps.setInt(1, compteCourant.getClientID());
			ps.setDouble(2, compteCourant.getSolde());
			ps.setDouble(3, compteCourant.getDecouvert());
			
			ps.setInt(4, compteCourant.getIdCompte());

			int verifAjout = ps.executeUpdate();

			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
	}
	
	/*===========================================================================*/
	/*===========================================================================*/
	
	
	public boolean retraitCour(Compte compteCourant, double montant) {
				
		PreparedStatement ps = null;
		double solde = compteCourant.getSolde();
		int id_compte = compteCourant.getIdCompte();
		double decouvert = compteCourant.getDecouvert();

		if(montant<(solde+decouvert)) {
		
			try {
				String requeteSqlAdd= "UPDATE comptes SET solde=? WHERE id_compte= ? ";
				
				ps = this.connection.prepareStatement(requeteSqlAdd);
	
				
				ps.setDouble(1, solde-montant);
				ps.setInt(2, id_compte);
	
				int verifAjout = ps.executeUpdate();
	
				return (verifAjout==1);
				
			} catch (SQLException e) {
	
				e.printStackTrace();
			}finally {
				try {
					if(ps!= null) ps.close();
					
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}//end try catch
		}//end if 
		else {
			System.out.println("Le montant demandé est trop élevé");
		}
		return false;

	}

	public boolean transfert(Compte compteDonneurCourant, double montant, Compte compteReceveur) {
		PreparedStatement ps = null;
		
		double soldeReceveur = compteReceveur.getSolde();
		int id_compteReceveur = compteReceveur.getIdCompte();
		
		
		double soldeDonneur = compteDonneurCourant.getSolde();
		int id_compteDonneur = compteDonneurCourant.getIdCompte();
		double decouvertDonner = compteDonneurCourant.getDecouvert();
		
		if(montant<(soldeDonneur+decouvertDonner)) {
		
		try {
			String requeteSqlRemove= "UPDATE comptes SET solde=? WHERE id_compte= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlRemove);

			ps.setDouble(1, soldeDonneur-montant);
			ps.setInt(2, id_compteDonneur);

			int verifTransfertDonneur = ps.executeUpdate();
			
			String requeteSqlAdd= "UPDATE comptes SET solde=? WHERE id_compte= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);

			ps.setDouble(1, soldeReceveur+montant);
			ps.setInt(2, id_compteReceveur);

			int verifTransfertReceveur = ps.executeUpdate();

			return (verifTransfertDonneur+verifTransfertReceveur==2);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}//end try catch
		}//end if 
		else {
			System.out.println("Le montant demandé est trop élevé");
		}
		return false;

	}
	
	public CompteCourant getByIDCour(int id) {
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetById="SELECT * FROM comptes WHERE id_compte = ?";
			ps = this.connection.prepareStatement(requeteSqlGetById);
			ps.setInt(1, id);
			
			resultatRequete = ps.executeQuery();
			CompteCourant compte = null;
			
			resultatRequete.next();
			
			int idCompte = resultatRequete.getInt(1);
			int clientID = resultatRequete.getInt(2);
			double solde = resultatRequete.getDouble(3);
			String typeCompte = resultatRequete.getString(4);
			double taux = resultatRequete.getInt(5);
			double decouvert  = resultatRequete.getInt(6);

			
			if (typeCompte.equals("courant")) {
				compte = new CompteCourant(idCompte, solde, clientID, taux);
			}else {
				System.out.println("Le compte "+ idCompte + "n'est pas un compte courant.");;
			}
			
			return compte;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
		
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}
	
	/*=============================================================================================================*/
	/*===============================================CLIENT========================================================*/

	public List<Client> getAllClients() {
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetAll="SELECT * FROM clients";
			ps = this.connection.prepareStatement(requeteSqlGetAll);
			
			resultatRequete = ps.executeQuery();

			Client client = null;
			
			List<Client> listeClient = new ArrayList <>();

			while (resultatRequete.next()) {
				int idClient = resultatRequete.getInt(1);
				String nom = resultatRequete.getString(2);
				String prenom = resultatRequete.getString(3);
				String adresse = resultatRequete.getString(4);
				String ville = resultatRequete.getString(5);
				String codePostal = resultatRequete.getString(6);
				
				String telephone = resultatRequete.getString(7);

				client = new Client(idClient, nom, prenom, adresse, ville, codePostal, telephone);
				
				listeClient.add(client);
				
			}//end while
			return listeClient;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}// end getAll()
	
	/*=============================================================================================================*/
	/*=============================================================================================================*/
	
	public List<Integer> getAllIDClient(){
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetAll="SELECT id_client FROM clients";
			ps = this.connection.prepareStatement(requeteSqlGetAll);
			
			resultatRequete = ps.executeQuery();

			Client client = null;
			
			List<Integer> listeIDClient = new ArrayList <>();

			while (resultatRequete.next()) {
				int idClient = resultatRequete.getInt(1);
				
				listeIDClient.add(idClient);
				
			}//end while
			return listeIDClient;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}// end getAllIDClient()
	
	/*=============================================================================================================*/
	/*=============================================================================================================*/
	
	public Client getByIDClient(int id) {
		PreparedStatement ps = null;
		ResultSet resultatRequete =null;
		
		try {
			String requeteSqlGetById="SELECT * FROM clients WHERE id_client = ?";
			ps = this.connection.prepareStatement(requeteSqlGetById);
			ps.setInt(1, id);
			
			resultatRequete = ps.executeQuery();
			Client client = null;
			
			resultatRequete.next();
			int idClient = resultatRequete.getInt(1);
			String prenom = resultatRequete.getString(2);
			String nom = resultatRequete.getString(3);
			String adresse = resultatRequete.getString(4);
			String ville = resultatRequete.getString(5);
			String codePostal = resultatRequete.getString(6);
			
			String telephone = resultatRequete.getString(7);

			client = new Client(idClient, nom, prenom, adresse, ville, codePostal, telephone);
			
			return client;
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
		
			try {
				if(resultatRequete!= null) resultatRequete.close();
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	
	/*===========================================================================*/
	/*===========================================================================*/
	
	
	
	public boolean addClient(Client client) {
		
		PreparedStatement ps = null;
		
		try {
			String requeteSqlAdd= "INSERT INTO  clients ( nom, prenom, adresse, ville, code_postal,  telephone) VALUES (?, ?, ?, ?, ?, ? )";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);
			
			ps.setString(1, client.getNom());
			ps.setString(2, client.getPrenom());
			ps.setString(3, client.getAdresse());
			ps.setString(4, client.getVille());
			ps.setString (5, client.getCodePostal());
			ps.setString(6, client.getTelephone());

			int verifAjout = ps.executeUpdate();

			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
	}

	/*===========================================================================*/
	/*===========================================================================*/
	

	public boolean updateClient(Client client) {
		
		PreparedStatement ps = null;
		
		try {
	
			String requeteSqlAdd= "UPDATE clients SET  nom =?, prenom = ?, adresse=?, ville=?, code_postal=?, telephone=? WHERE id_client= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);
		
			ps.setString(1, client.getPrenom());
			ps.setString(2, client.getNom());
			ps.setString(3, client.getAdresse());
			ps.setString(4, client.getVille());
			ps.setString (5, client.getCodePostal());
			
			ps.setString(6, client.getTelephone());
			
			ps.setInt(7, client.getIdClient());
			

			int verifAjout = ps.executeUpdate();
			
			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
	}
	
	/*===========================================================================*/
	/*===========================================================================*/


	public boolean deleteClient(int id) {
		PreparedStatement ps = null;
		
		
		try {
			
			String requeteSqlDelete= "DELETE FROM clients WHERE id_client=?";
			
			ps = this.connection.prepareStatement(requeteSqlDelete);
			
			ps.setInt(1, id);

			int verifdelete = ps.executeUpdate();

			return (verifdelete==1);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		

		return false;
	}

	@Override
	public boolean modifierClient(Client clientUp) {
PreparedStatement ps = null;
		
		try {
	
			String requeteSqlAdd= "UPDATE clients SET prenom = ?, nom =?, adresse=?, code_postal=?,ville=?, telephone=? WHERE id_client= ? ";
			
			ps = this.connection.prepareStatement(requeteSqlAdd);
		
			ps.setString(1, clientUp.getPrenom());
			ps.setString(2, clientUp.getNom());
			ps.setString(3, clientUp.getAdresse());
			ps.setString (4, clientUp.getCodePostal());
			ps.setString(5, clientUp.getVille());
			ps.setString(6, clientUp.getTelephone());
			
			ps.setInt(7, clientUp.getIdClient());
			

			int verifAjout = ps.executeUpdate();
			
			return (verifAjout==1);
			
		} catch (SQLException e) {

			e.printStackTrace();
		}finally {
			try {
				if(ps!= null) ps.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
		
		
	}
}
