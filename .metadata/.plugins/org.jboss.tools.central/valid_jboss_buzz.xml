<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>How to write an ABI compliance checker using Libabigail</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/13jWrDMybyo/" /><category term="C" /><category term="C++" /><category term="Linux" /><category term="Python" /><category term="ABI checker" /><category term="abidiff" /><category term="ELF binary" /><category term="Libabigail" /><author><name>Dodji Seketeli</name></author><id>https://developers.redhat.com/blog/?p=691717</id><updated>2020-04-02T07:00:11Z</updated><published>2020-04-02T07:00:11Z</published><content type="html">&lt;p&gt;I&amp;#8217;ve previously written about the challenges of &lt;a href="https://developers.redhat.com/blog/2014/10/23/comparing-abis-for-compatibility-with-libabigail-part-1" target="_blank" rel="noopener noreferrer"&gt;ensuring forward compatibility for application binary interfaces (ABIs) exposed by native shared libraries&lt;/a&gt;. This article introduces the other side of the equation: How to verify ABI backward compatibility for upstream projects.&lt;/p&gt; &lt;p&gt;If you&amp;#8217;ve read my previous article, you&amp;#8217;ve already been introduced to &lt;a href="https://sourceware.org/libabigail" target="_blank" rel="noopener noreferrer"&gt;Libabigail&lt;/a&gt;, a static-code analysis and instrumentation library for constructing, manipulating, serializing, and de-serializing ABI-relevant artifacts.&lt;/p&gt; &lt;p&gt;In this article, I&amp;#8217;ll show you how to build a Python-based checker that uses Libabigail to verify the backward compatibility of ABIs in a &lt;a href="https://en.wikipedia.org/wiki/Library_%28computing%29#Shared_libraries"&gt;shared library&lt;/a&gt;. For this case, we&amp;#8217;ll focus on ABIs for shared libraries in the executable and linkable format (ELF) binary format that runs on Linux-based operating systems.&lt;/p&gt; &lt;p&gt;&lt;span id="more-691717"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: This tutorial assumes that you have Libabigail and its associated command-line tools, &lt;code&gt;abidw&lt;/code&gt; and &lt;code&gt;abidiff&lt;/code&gt; installed and set up in your development environment. See the &lt;a href="https://sourceware.org/libabigail" target="_blank" rel="noopener noreferrer"&gt;Libabigail&lt;/a&gt; documentation for a guide to getting and installing Libabigail.&lt;/p&gt; &lt;h2&gt;Ensuring backward compatibility&lt;/h2&gt; &lt;p&gt;If we state that the ABI of a newer version of a shared library is &lt;em&gt;backward compatible&lt;/em&gt;, we&amp;#8217;re assuring our users that ABI changes in the newer version of the library won&amp;#8217;t affect applications linked against older versions. This means application functionality won&amp;#8217;t change or be disrupted in any way, even for users who update to the newer version of the library without recompiling their application.&lt;/p&gt; &lt;p&gt;To make such a statement with confidence, we need a way to compare the ABI of the newer library version against the older one. Knowing what the ABI changes are, we&amp;#8217;ll then be able to determine whether any change is likely to break backward compatibility.&lt;/p&gt; &lt;h2&gt;The example project: libslicksoft.so&lt;/h2&gt; &lt;p&gt;For the sake of this article, let&amp;#8217;s assume I&amp;#8217;m the release manager for a free software project named SlickSoftware. I have convinced you (my fellow hacker) that the ABI of our library, &lt;code&gt;libslicksoft.so&lt;/code&gt;, should be backward compatible with older versions, at least for now.  In order to ensure backward compatibility, we&amp;#8217;ll write an ABI-checking program that we can run at any point in the development cycle. The checker will help us ensure that the ABI for the current version of &lt;code&gt;libslicksoft.so&lt;/code&gt; remains compatible with the ABI of a previous version, the baseline ABI. Once we&amp;#8217;ve written the checker, we&amp;#8217;ll also be able to use it for future projects.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s the layout of the &lt;code&gt;slick-software/lib&lt;/code&gt; directory, which contains SlickSoftware&amp;#8217;s source code:&lt;/p&gt; &lt;pre&gt;+ slick-software/ | + lib/ |    | |    + file1.c |    | |    + Makefile | + include/ |        | |        + public-header.h | + abi-ref/ &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s start by setting up our example project.&lt;/p&gt; &lt;h3&gt;Step 1: Create a shared library&lt;/h3&gt; &lt;p&gt;To create a shared library, we visit the &lt;code&gt;slick-software/lib&lt;/code&gt; directory and type &lt;code&gt;make&lt;/code&gt;. We&amp;#8217;ll call the new shared library &lt;code&gt;slick-software/lib/libslicksoft.so&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Step 2: Create a representation of the reference ABI&lt;/h3&gt; &lt;p&gt;Our next step is to create a representation of the ABI for our shared library, &lt;code&gt;slick-software/lib/libslicksoft.so&lt;/code&gt;. Once we&amp;#8217;ve done that, we&amp;#8217;ll save it in the &lt;code&gt;slick-software/abi-ref/&lt;/code&gt; directory, which is currently empty.&lt;/p&gt; &lt;p&gt;The ABI representation will serve as a &lt;em&gt;reference ABI&lt;/em&gt;. We&amp;#8217;ll compare the ABI of all subsequent versions of &lt;code&gt;libslicksoft.so&lt;/code&gt; against it. In theory, we could just save a copy of &lt;code&gt;libslicksoft.so&lt;/code&gt; and use the binary itself for ABI comparisons.  We&amp;#8217;ve chosen not to do that because, like many developers, we don&amp;#8217;t like storing binaries in revision-control software. Luckily Libabigail allows us to save a textual representation of the ABI.&lt;/p&gt; &lt;h4&gt;Creating the ABI representation&lt;/h4&gt; &lt;p&gt;To generate a textual representation of an ELF binary&amp;#8217;s ABI, all we have to do is open Libabigail&amp;#8217;s command-line tool, &lt;a href="https://sourceware.org/libabigail/manual/abidw.html" target="_blank" rel="noopener noreferrer"&gt;abidw&lt;/a&gt;, and enter the following:&lt;/p&gt; &lt;pre&gt;$ abidw slick-software/lib/libslicksoft.so &amp;#62; slick-software/abi-ref/libslicksoft.so.abi &lt;/pre&gt; &lt;h4&gt;Automating the creation process&lt;/h4&gt; &lt;p&gt;We can automate this process by adding a rule at the end of &lt;code&gt;slick-software/lib/Makefile&lt;/code&gt;. In the future, we&amp;#8217;ll just type &lt;code&gt;make abi-ref&lt;/code&gt; whenever we want to generate a textual representation of the ABI &lt;code&gt;libslicksoft.so.abi&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s the content of that &lt;code&gt;Makefile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$cat slick-software/lib/Makefile SRCS:=file1.c HEADER_FILE:=../include/public-header.h SHARED_LIB:=libslicksoft.so SHARED_LIB_SONAME=libslicksoft ABI_REF_DIR=../abi-ref ABI_REF=$(ABI_REF_DIR)/$(SHARED_LIB).abi CFLAGS:=-Wall -g -I../include LDFLAGS:=-shared -Wl,-soname=$(SHARED_LIB_SONAME) ABIDW:= /usr/bin/abidw ABIDIFF= /usr/bin/abidiff OBJS:=$(subst .c,.o,$(SRCS)) all: $(SHARED_LIB) %.o:%.c $(HEADER_FILE) $(CC) -c $(CFLAGS) -o $@ $&amp;#60; $(SHARED_LIB): $(OBJS) $(CC) $(LDFLAGS) -o $@ $&amp;#60; clean: rm -f *.o $(SHARED_LIB) $(ABI_REF) abi-ref: $(SHARED_LIB) $(ABIDW) $&amp;#60; &amp;#62; $(ABI_REF) &lt;/pre&gt; &lt;h3&gt;Step 3: Compare ABI changes&lt;/h3&gt; &lt;p&gt;Now that we have a reference ABI, we just need to compare newer versions of &lt;code&gt;libslicksoft.so&lt;/code&gt; against it and analyze the changes. We can use Libabigail&amp;#8217;s &lt;a href="https://sourceware.org/libabigail/manual/abidiff.html" target="_blank" rel="noopener noreferrer"&gt;abidiff&lt;/a&gt; program to compare the two library versions. Here&amp;#8217;s the command to invoke &lt;code&gt;abidiff&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;abidiff baseline.abi path/to/new-binary &lt;/pre&gt; &lt;p&gt;This command line compares the ABIs of &lt;code&gt;new-binary&lt;/code&gt; against the &lt;code&gt;baseline.abi&lt;/code&gt;. It produces a report about the potential ABI changes, then returns a status code that tells us about the different kinds of ABI changes detected. By analyzing the status code, which is represented as a bitmap, we&amp;#8217;ll be able to tell if any of the ABI changes are likely to break backward compatibility.&lt;/p&gt; &lt;h2&gt;The Python-based ABI diff checker&lt;/h2&gt; &lt;p&gt;Our next task is to write a program that invokes &lt;code&gt;abidiff&lt;/code&gt; to perform the ABI check. We&amp;#8217;ll call it &lt;code&gt;check-abi&lt;/code&gt; and place it in the new &lt;code&gt;slick-software/tools&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;I&amp;#8217;ve been told Python is cool, so I want to try it out with this new checker. I am far from being a Python expert, but hey, what can go wrong?&lt;/p&gt; &lt;h3&gt;Step 1: Spec the ABI checker&lt;/h3&gt; &lt;p&gt;To start, let&amp;#8217;s walk through this Python-based ABI checker we want to write. We&amp;#8217;ll run it like this:&lt;/p&gt; &lt;pre&gt;$ check-abi baseline.abi slicksoft.so &lt;/pre&gt; &lt;p&gt;The checker should be simple. If there are no ABI issues it will exit with a zero (0) status code. If it finds a backward-compatibility issue, it will return a non-zero status code and a useful message.&lt;/p&gt; &lt;h3&gt;Step 2: Import dependencies&lt;/h3&gt; &lt;p&gt;We&amp;#8217;re writing the &lt;code&gt;check-abi&lt;/code&gt; program as a script in &lt;a href="https://www.python.org/downloads/" target="_blank" rel="noopener noreferrer"&gt;Python 3&lt;/a&gt;. The first thing we&amp;#8217;ll do is import the packages we need for this program:&lt;/p&gt; &lt;pre&gt;#!/usr/bin/env python3 import argparse import subprocess import sys &lt;/pre&gt; &lt;h3&gt;Step 3: Define a parser&lt;/h3&gt; &lt;p&gt;Next, we&amp;#8217;ll need a function that parses command-line arguments. Let&amp;#8217;s define it without bothering too much about the content for now:&lt;/p&gt; &lt;pre&gt;def parse_command_line(): """Parse the command line arguments. check-abi expects the path to the new binary and a path to the baseline ABI to compare against. It can also optionaly take the path to the abidiff program to use. """ # ... &lt;/pre&gt; &lt;h3&gt;Step 4: Write the main function&lt;/h3&gt; &lt;p&gt;In this case, I&amp;#8217;ve already written the main function, so let&amp;#8217;s take a look:&lt;/p&gt; &lt;pre&gt;def main(): # Get the configuration of this program from the command line # arguments. The configuration ends up being a variable named # config, which has three properties: # # config.abidiff: this is the path to the abidiff program # # config.baseline_abi: this is the path to the baseline # ABI. It's the reference ABI that was # previously stored and that we need to # compare the ABI of the new binary # against. # # config.new_abi: this is the path to the new binary which ABI # is to be compared against the baseline # referred to by config.baseline_abi. # config = parse_command_line() # Execute the abidiff program to compare the new ABI against the # baseline. completed_process = subprocess.run([config.abidiff, "--no-added-syms", config.baseline_abi, config.new_abi], universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT) if completed_process.returncode != 0: # Let's define the values of the bits of the "return code" # returned by abidiff. Depending on which bit is set, we know # what happened in terms of ABI verification. These bits are # documented at # https://sourceware.org/libabigail/manual/abidiff.html#return-values. ABIDIFF_ERROR_BIT = 1 ABI_CHANGE_BIT = 4 ABI_INCOMPATIBLE_CHANGE_BIT = 8 if completed_process.returncode &amp;#38; ABIDIFF_ERROR_BIT: print("An unexpected error happened while running abidiff:\n") return 0 elif completed_process.returncode &amp;#38; ABI_INCOMPATIBLE_CHANGE_BIT: # If this bit is set, it means we detected an ABI change # that breaks backwards ABI compatibility, for sure. print("An incompatible ABI change was detected:\n") elif completed_process.returncode &amp;#38; ABI_CHANGE_BIT: # If this bit is set, (and ABI_INCOMPATIBLE_CHANGE_BIT is # not set) then it means there was an ABI change that # COULD potentially break ABI backward compatibility. To # be sure if this change is problematic or not, a human # review is necessary print("An ABI change that needs human review was detected:\n") print("%s" % completed_process.stdout) return completed_process.returncode return 0; &lt;/pre&gt; &lt;h4&gt;Notes about the code&lt;/h4&gt; &lt;p&gt;The code is heavily commented to make it easier for future programmers to understand. Here are two important highlights. First, notice how &lt;code&gt;check-abi&lt;/code&gt; invokes &lt;code&gt;abidiff&lt;/code&gt; with the &lt;code&gt;--no-added-syms&lt;/code&gt; option. That option tells &lt;code&gt;abidiff&lt;/code&gt; that added functions, global variables, and publicly defined ELF symbols (&lt;em&gt;aka&lt;/em&gt; added ABI artifacts) should &lt;strong&gt;not&lt;/strong&gt; be reported. This lets us focus our attention on ABI artifacts that have been changed or removed.&lt;/p&gt; &lt;p&gt;Second, notice how we&amp;#8217;ve set the checker to analyze the return code generated by &lt;code&gt;abidiff&lt;/code&gt;. You can see this detail in the &lt;code&gt;if&lt;/code&gt; statement starting here:&lt;/p&gt; &lt;pre&gt;if completed_process.returncode != 0: &lt;/pre&gt; &lt;p&gt;If the first bit of that return code is set (bit value 1) then it means &lt;code&gt;abidiff&lt;/code&gt; encountered a plumbing error while executing. In that case, &lt;code&gt;check-abi&lt;/code&gt; will print an error message but it won&amp;#8217;t report an ABI issue.&lt;/p&gt; &lt;p&gt;If the fourth bit of the return code is set (bit value 8) then it means an ABI change breaks backward compatibility with the older library version. In that case, &lt;code&gt;check-abi&lt;/code&gt; will print a meaningful message and a detailed report of the change. Recall that in this case, the checker produces a non-zero return code.&lt;/p&gt; &lt;p&gt;If only the third bit of the return code is set (bit value 4), and the fourth bit mentioned above is not, then it means &lt;code&gt;abidiff&lt;/code&gt; detected an ABI change that could &lt;em&gt;potentially&lt;/em&gt; break backward compatibility. In this case, a human review of the change is necessary. The checker will print a meaningful message and a detailed report for someone to review.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are interested, you can find the complete details of the return code generated by &lt;code&gt;abidiff&lt;/code&gt; &lt;a href="https://sourceware.org/libabigail/manual/abidiff.html#return-values" target="_blank" rel="noopener noreferrer"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Source code for the check-abi program&lt;/h2&gt; &lt;p&gt;Here&amp;#8217;s the complete source code for the &lt;code&gt;check-abi&lt;/code&gt; program:&lt;/p&gt; &lt;pre&gt;#!/usr/bin/env python3 import argparse import subprocess import sys def parse_command_line(): """Parse the command line arguments. check-abi expects the path to the new binary and a path to the baseline ABI to compare against. It can also optionaly take the path to the abidiff program to use. """ parser = argparse.ArgumentParser(description="Compare the ABI of a binary " "against a baseline") parser.add_argument("baseline_abi", help = "the path to a baseline ABI to compare against") parser.add_argument("new_abi", help = "the path to the ABI to compare " "against the baseline") parser.add_argument("-a", "--abidiff", required = False, default="/home/dodji/git/libabigail/master/build/tools/abidiff") return parser.parse_args() def main(): # Get the configuration of this program from the command line # arguments. The configuration ends up being a variable named # config, which has three properties: # # config.abidiff: this is the path to the abidiff program # # config.baseline_abi: this is the path to the baseline # ABI. It's the reference ABI that was # previously stored and that we need to # compare the ABI of the new binary # against. # # config.new_abi: this is the path to the new binary which ABI # is to be compared against the baseline # referred to by config.baseline_abi. # config = parse_command_line() # Execute the abidiff program to compare the new ABI against the # baseline. completed_process = subprocess.run([config.abidiff, "--no-added-syms", config.baseline_abi, config.new_abi], universal_newlines = True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT) if completed_process.returncode != 0: # Let's define the values of the bits of the "return code" # returned by abidiff. Depending on which bit is set, we know # what happened in terms of ABI verification. These bits are # documented at # https://sourceware.org/libabigail/manual/abidiff.html#return-values. ABIDIFF_ERROR_BIT = 1 ABI_CHANGE_BIT = 4 ABI_INCOMPATIBLE_CHANGE_BIT = 8 if completed_process.returncode &amp;#38; ABIDIFF_ERROR_BIT: print("An unexpected error happened while running abidiff:\n") return 0 elif completed_process.returncode &amp;#38; ABI_INCOMPATIBLE_CHANGE_BIT: # If this bit is set, it means we detected an ABI change # that breaks backwards ABI compatibility, for sure. print("An incompatible ABI change was detected:\n") elif completed_process.returncode &amp;#38; ABI_CHANGE_BIT: # If this bit is set, (and ABI_INCOMPATIBLE_CHANGE_BIT is # not set) then it means there was an ABI change that # COULD potentially break ABI backward compatibility. To # be sure if this change is problematic or not, a human # review is necessary print("An ABI change that needs human review was detected:\n") print("%s" % completed_process.stdout) return completed_process.returncode return 0; if __name__ == "__main__": sys.exit(main()) &lt;/pre&gt; &lt;h2&gt;Using check-abi from the Makefile&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re done with our basic checker, but we could add a feature or two. For instance, wouldn&amp;#8217;t it be nice if we could invoke our shiny new &lt;code&gt;check-abi&lt;/code&gt; program from the &lt;code&gt;slick-software/lib&lt;/code&gt; directory? Then we could enter a simple &lt;code&gt;make&lt;/code&gt; command anytime we needed to do an ABI verification.&lt;/p&gt; &lt;p&gt;We can set this feature up by adding a rule at the end of the &lt;code&gt;slick-software/lib/Makefile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;abi-check: $(SHARED_LIB) $(CHECK_ABI) $(ABI_REF) $(SHARED_LIB) || echo "ABI compatibility issue detected!" &lt;/pre&gt; &lt;p&gt;Of course, we also need to define the variable &lt;code&gt;CHECK_ABI&lt;/code&gt; at the beginning of the Makefile:&lt;/p&gt; &lt;pre&gt;CHECK_ABI=../tools/check-abi &lt;/pre&gt; &lt;p&gt;Here&amp;#8217;s the complete Makefile with these changes:&lt;/p&gt; &lt;pre&gt;SRCS:=file1.c HEADER_FILE:=../include/public-header.h SHARED_LIB:=libslicksoft.so SHARED_LIB_SONAME=libslicksoft ABI_REF_DIR=../abi-ref ABI_REF=$(ABI_REF_DIR)/$(SHARED_LIB).abi CFLAGS:=-Wall -g -I../include LDFLAGS:=-shared -Wl,-soname=$(SHARED_LIB_SONAME) ABIDW:=/usr/bin/abidw ABIDIFF=/usr/bin/abidiff CHECK_ABI=../tools/check-abi OBJS:=$(subst .c,.o,$(SRCS)) all: $(SHARED_LIB) %.o:%.c $(HEADER_FILE) $(CC) -c $(CFLAGS) -o $@ $&amp;#60; $(SHARED_LIB): $(OBJS) $(CC) $(LDFLAGS) -o $@ $&amp;#60; clean: rm -f *.o $(SHARED_LIB) $(ABI_REF) abi-ref: $(SHARED_LIB) $(ABIDW) $&amp;#60; &amp;#62; $(ABI_REF) abi-check: $(SHARED_LIB) $(CHECK_ABI) $(ABI_REF) $(SHARED_LIB) || echo "ABI compatibility issue detected!" &lt;/pre&gt; &lt;h2&gt;Run the checker&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re nearly done, but let&amp;#8217;s test our new checker with a simple ABI check for backward compatibility. First, I will make a few changes to the &lt;code&gt;slick-software&lt;/code&gt; library, so I have differences to check.&lt;/p&gt; &lt;p&gt;Next, I visit the &lt;code&gt;slick-software/lib&lt;/code&gt; directory and run &lt;code&gt;make abi-check&lt;/code&gt;. Here&amp;#8217;s what&amp;#8217;s I get back:&lt;/p&gt; &lt;pre&gt;$ make abi-check ../tools/check-abi ../abi-ref/libslicksoft.so.abi libslicksoft.so || echo "ABI compatibility issue detected!" An incompatible ABI change was detected: Functions changes summary: 1 Removed, 0 Changed, 0 Added function Variables changes summary: 0 Removed, 0 Changed, 0 Added variable 1 Removed function: 'function void function_1()' {function_1} ABI compatibility issue detected! $ &lt;/pre&gt; &lt;p&gt;The ABI checker is reporting one compatibility issue, with a removed function. I guess I should put &lt;code&gt;function_1()&lt;/code&gt; back in to avoid breaking the ABI.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, I showed you how to write a basic ABI verifier for shared libraries in your upstream projects. To keep this project simple, I left out other features that you might want to add to the checker yourself. For instance, Libabigail has mechanisms for handling false positives, which are common in real-world projects. Also, we are constantly improving this tool for the quality of the analysis it can do. If anything about Libabigail doesn&amp;#8217;t work as you would like, please let us know on &lt;a href="https://sourceware.org/libabigail/" target="_blank" rel="noopener noreferrer"&gt;the Libabigail mailing list&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Happy hacking, and may all of your ABI incompatibilities be spotted.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F02%2Fhow-to-write-an-abi-compliance-checker-using-libabigail%2F&amp;#38;linkname=How%20to%20write%20an%20ABI%20compliance%20checker%20using%20Libabigail" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F02%2Fhow-to-write-an-abi-compliance-checker-using-libabigail%2F&amp;#38;linkname=How%20to%20write%20an%20ABI%20compliance%20checker%20using%20Libabigail" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F02%2Fhow-to-write-an-abi-compliance-checker-using-libabigail%2F&amp;#38;linkname=How%20to%20write%20an%20ABI%20compliance%20checker%20using%20Libabigail" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F02%2Fhow-to-write-an-abi-compliance-checker-using-libabigail%2F&amp;#38;linkname=How%20to%20write%20an%20ABI%20compliance%20checker%20using%20Libabigail" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F02%2Fhow-to-write-an-abi-compliance-checker-using-libabigail%2F&amp;#38;linkname=How%20to%20write%20an%20ABI%20compliance%20checker%20using%20Libabigail" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F02%2Fhow-to-write-an-abi-compliance-checker-using-libabigail%2F&amp;#38;linkname=How%20to%20write%20an%20ABI%20compliance%20checker%20using%20Libabigail" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F02%2Fhow-to-write-an-abi-compliance-checker-using-libabigail%2F&amp;#38;linkname=How%20to%20write%20an%20ABI%20compliance%20checker%20using%20Libabigail" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F02%2Fhow-to-write-an-abi-compliance-checker-using-libabigail%2F&amp;#038;title=How%20to%20write%20an%20ABI%20compliance%20checker%20using%20Libabigail" data-a2a-url="https://developers.redhat.com/blog/2020/04/02/how-to-write-an-abi-compliance-checker-using-libabigail/" data-a2a-title="How to write an ABI compliance checker using Libabigail"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/02/how-to-write-an-abi-compliance-checker-using-libabigail/"&gt;How to write an ABI compliance checker using Libabigail&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/13jWrDMybyo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I&amp;#8217;ve previously written about the challenges of ensuring forward compatibility for application binary interfaces (ABIs) exposed by native shared libraries. This article introduces the other side of the equation: How to verify ABI backward compatibility for upstream projects. If you&amp;#8217;ve read my previous article, you&amp;#8217;ve already been introduced to Libabigail, a static-code analysis and instrumentation [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/02/how-to-write-an-abi-compliance-checker-using-libabigail/"&gt;How to write an ABI compliance checker using Libabigail&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">691717</post-id><dc:creator>Dodji Seketeli</dc:creator><dc:date>2020-04-02T07:00:11Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/02/how-to-write-an-abi-compliance-checker-using-libabigail/</feedburner:origLink></entry><entry><title>Code Ready Containers - Installing process automation from developer container catalog</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/yPt7H0E0vIs/code-ready-containers-installing-process-automation-from-developer-catalog.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReadyContainers" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-code_ready_containers_installing_process_automation_from_developer_container_catalog</id><updated>2020-04-02T08:23:13Z</updated><published>2020-04-02T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-ljVBCOBG_tI/XoSQF5J_QdI/AAAAAAAAxAc/tpjUgvQxWU8-Z3AxOnnvpX8LJp1gE09rwCNcBGAsYHQ/s1600/rhcs-rhpam-pod-ocp-rhpamcentr.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="Code Ready Containers" border="0" data-original-height="888" data-original-width="1600" height="177" src="https://1.bp.blogspot.com/-ljVBCOBG_tI/XoSQF5J_QdI/AAAAAAAAxAc/tpjUgvQxWU8-Z3AxOnnvpX8LJp1gE09rwCNcBGAsYHQ/s320/rhcs-rhpam-pod-ocp-rhpamcentr.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;For some time now we've been working on updating your experience using Code Ready Containers, a container platform installation for your local machine, by providing interesting developer tooling and project examples.&lt;br /&gt;&lt;br /&gt;There is no better way to learn about container technologies, container platforms, and container-based application development than getting hands-on with great open technologies.&lt;br /&gt;&lt;br /&gt;Previously, I've shared how to install a custom latest greatest version of the Red Hat process automation tooling. The question that remains is, what do you need to do to make use of the container images pre-installed with the latest version of Code Ready Containers 1.7.0?&lt;br /&gt;&lt;br /&gt;This tutorial walks through a few simple steps to getting both the latest Code Ready Containers started on your laptop, as well as installing the provided process automation tooling catalog entry.&lt;br /&gt;&lt;br /&gt;Exploring your first process automation project on an OpenShift Container Platform has never been easier.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;This tutorial is two parts, first installing the latest Code Ready Containers v1.7.0 to provide for an OpenShift Container Platform on your local laptop. Second, you'll install the provide Red Hat Process Automation Manager 7.4 authoring image from the developer catalog.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div data-sourcepos="3:1-4:70" dir="auto"&gt;&lt;/div&gt;&lt;h3 data-sourcepos="7:1-9:131" style="text-align: left;"&gt;Installing the container platform&lt;/h3&gt;&lt;div data-sourcepos="9:1-10:83" dir="auto"&gt;You can of course &lt;a href="https://developers.redhat.com/products/codeready-containers/download/" target="_blank"&gt;download the latest Code Ready Containers&lt;/a&gt;, but to ensure that you are able to actively use this with various provided images found in the developer catalog requires fine tuning.&lt;br /&gt;&lt;br /&gt;To that end, I've provided an installation project that configures all you need in just a single installation script as follows.&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-eprB2sHCQMs/XoSM1kHpLMI/AAAAAAAAxAI/OPjTjIMdC5Mhgo3P7JHyX8qS2POWukkRgCNcBGAsYHQ/s1600/ocp-login.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="Code Ready Containers" border="0" data-original-height="761" data-original-width="1489" height="163" src="https://1.bp.blogspot.com/-eprB2sHCQMs/XoSM1kHpLMI/AAAAAAAAxAI/OPjTjIMdC5Mhgo3P7JHyX8qS2POWukkRgCNcBGAsYHQ/s320/ocp-login.png" title="" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;First off, you don't even have to pre-download anything other that this project as it's going to check for each component and point you to the download site if you just follow the following steps:&lt;br /&gt;&lt;ol&gt;&lt;li data-sourcepos="29:1-30:0"&gt;&lt;div data-sourcepos="29:4-29:124"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo/-/archive/master/ocp-install-demo-master.zip"&gt;Download and unzip.&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="31:1-32:0"&gt;&lt;div data-sourcepos="31:4-31:116"&gt;Run '&lt;i&gt;init.sh&lt;/i&gt;' or '&lt;i&gt;init.bat&lt;/i&gt;' file, then sit back. (Note: '&lt;i&gt;init.bat&lt;/i&gt;' should be run with Administrative privileges.)&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="33:1-35:0"&gt;&lt;div data-sourcepos="33:4-33:90"&gt;Follow displayed instructions to log in to your brand new Code Ready Containers OpenShift Container Platform on your laptop.&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;Paying close attention to the above init script output ensures a painless experience and you'll be up and running in just a few minutes. If you're wondering what's happening, here are the steps inside the installation if you are running it for the first time on your machine:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;Your system is checked for the availability of the OpenShift client known as '&lt;i&gt;oc client&lt;/i&gt;', if not available or not the latest version, you'll be pointed to where you download. After downloading and installing '&lt;i&gt;oc client&lt;/i&gt;', restart the installation script.&lt;/li&gt;&lt;li&gt;Your system is checked for the availability of Code Ready Containers version 1.70, if not you'll be pointed to the download site. Part of this download is a &lt;i&gt;pull-secret&lt;/i&gt;&amp;nbsp;file, get that too and add it's path to the &lt;i&gt;SECRET_PATH &lt;/i&gt;variable in the installation script, it's found at the top. After installing '&lt;i&gt;crc&lt;/i&gt;', restart the installation script.&lt;/li&gt;&lt;li&gt;The next check is for a valid path to your &lt;i&gt;pull-secret&lt;/i&gt; file, it should be set in the &lt;i&gt;SECRET_PATH&lt;/i&gt; variable, if not the installation stops until you correct this.&lt;/li&gt;&lt;li&gt;Next the installation sets up the container platform configuration by allocating 10 GB of memory and 4 CPUs.&lt;/li&gt;&lt;li&gt;At this time the container platform is started, you are invited to grab a coffee while you wait.&lt;/li&gt;&lt;li&gt;As the platform starts, information is gathered to present you with an overview once the installation has completed so you can log in.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-6BmxyaBv1X4/XoSNAt4FhxI/AAAAAAAAxAM/_XwrC3ib9f8Je5IB4xCXM3D9fKSBhESGgCNcBGAsYHQ/s1600/rhcs-rhpam-pod-ocp.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="Code Ready Containers" border="0" data-original-height="885" data-original-width="1600" height="176" src="https://1.bp.blogspot.com/-6BmxyaBv1X4/XoSNAt4FhxI/AAAAAAAAxAM/_XwrC3ib9f8Je5IB4xCXM3D9fKSBhESGgCNcBGAsYHQ/s320/rhcs-rhpam-pod-ocp.png" title="" width="320" /&gt;&lt;/a&gt;That's it. Using the URL provided you can log in and open the developer view to watch the second part of this article, installing the process automation tooling container image.&lt;/div&gt;&lt;br /&gt;&lt;h3 data-sourcepos="7:1-9:131" style="text-align: left;"&gt;Installing process automation&lt;/h3&gt;&lt;div&gt;Now it's time to install the process automation tooling, easily done by following the steps below:&lt;/div&gt;&lt;/div&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;&lt;/div&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;&lt;ol&gt;&lt;li data-sourcepos="18:1-19:0"&gt;&lt;div data-sourcepos="18:4-18:148"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo/-/archive/master/rhcs-rhpam-install-demo-master.zip"&gt;Download and unzip this demo.&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="20:1-21:0"&gt;&lt;div data-sourcepos="20:4-20:91"&gt;Run '&lt;i&gt;init.sh&lt;/i&gt;' or '&lt;i&gt;init.bat&lt;/i&gt;' file. '&lt;i&gt;init.bat&lt;/i&gt;' must be run with Administrative privileges:&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;Note that this installation does not require any product downloads, because you're installing using the provided Code Ready Containers developer container catalog entry. The exact entry is the Red Hat Process Automation Manager 7.4.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-kzus2DnKN0o/XoWeIc0SDkI/AAAAAAAAxA0/_aMcOJlVfDQJzKr2_ysnQmdlZfMAn1xewCNcBGAsYHQ/s1600/Screenshot%2B2020-03-31%2Bat%2B12.54.16.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="Code Ready Containers" border="0" data-original-height="981" data-original-width="1300" height="241" src="https://1.bp.blogspot.com/-kzus2DnKN0o/XoWeIc0SDkI/AAAAAAAAxA0/_aMcOJlVfDQJzKr2_ysnQmdlZfMAn1xewCNcBGAsYHQ/s320/Screenshot%2B2020-03-31%2Bat%2B12.54.16.png" title="" width="320" /&gt;&lt;/a&gt;As you watch the installation script run you can view the developer &lt;i&gt;Topology&lt;/i&gt;&amp;nbsp;view in Code Ready Containers console you logged in to above. You will see two containers starting up, one is the &lt;i&gt;business central authoring&lt;/i&gt; environment and the other is the &lt;i&gt;KIE-server&lt;/i&gt;&amp;nbsp;deployment container.&lt;br /&gt;&lt;br /&gt;Once they are both running with a dark blue circle to indicate this, you can login to the authoring environment. Either look at the authoring container by clicking on it to open the right pane with information, or easier, just use the URL provided at the end of the installation script.&lt;br /&gt;&lt;br /&gt;Now log in to Red Hat Process Automation Manager to start developing containerized process automation projects (the address will be generated):&lt;/div&gt;&lt;ul data-sourcepos="44:3-45:0" dir="auto"&gt;&lt;li data-sourcepos="44:3-45:0"&gt;Code Ready Container example: https://rhcs-rhpam-install-demo-rhpamcentr-appdev-in-cloud.apps-crc.testing ( u:erics / p:redhatpam1! )&lt;/li&gt;&lt;/ul&gt;&lt;div data-sourcepos="46:1-46:195" dir="auto"&gt;Not sure how to get started with Red Hat Process Automation Manager? Try one of these &lt;a href="https://bpmworkshop.gitlab.io/index-rhpam.html#/1" rel=" noreferrer noopener" target="_blank"&gt;online workshops&lt;/a&gt; to build or import your first project.&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=6eVVDst9mxo:sodnHjKTD74:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=6eVVDst9mxo:sodnHjKTD74:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=6eVVDst9mxo:sodnHjKTD74:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=6eVVDst9mxo:sodnHjKTD74:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=6eVVDst9mxo:sodnHjKTD74:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=6eVVDst9mxo:sodnHjKTD74:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=6eVVDst9mxo:sodnHjKTD74:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=6eVVDst9mxo:sodnHjKTD74:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=6eVVDst9mxo:sodnHjKTD74:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=6eVVDst9mxo:sodnHjKTD74:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=6eVVDst9mxo:sodnHjKTD74:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/6eVVDst9mxo" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/yPt7H0E0vIs" height="1" width="1" alt=""/&gt;</content><summary>For some time now we've been working on updating your experience using Code Ready Containers, a container platform installation for your local machine, by providing interesting developer tooling and project examples. There is no better way to learn about container technologies, container platforms, and container-based application development than getting hands-on with great open technologies. Prev...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-04-02T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/6eVVDst9mxo/code-ready-containers-installing-process-automation-from-developer-catalog.html</feedburner:origLink></entry><entry><title>Set up Red Hat AMQ Streams custom certificates on OpenShift (update)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/uIPrrRkUndA/" /><category term="Event-Driven" /><category term="Java" /><category term="Kubernetes" /><category term="amq streams" /><category term="kafka" /><category term="openshift" /><category term="TLS encryption" /><author><name>Federico Valeri</name></author><id>https://developers.redhat.com/blog/?p=691357</id><updated>2020-04-01T07:00:41Z</updated><published>2020-04-01T07:00:41Z</published><content type="html">&lt;p&gt;As anticipated in the &amp;#8220;Additional notes&amp;#8221; section of &lt;a href="https://developers.redhat.com/blog/2019/12/18/set-up-red-hat-amq-streams-custom-certificates-on-openshift/" target="_blank" rel="noopener noreferrer"&gt;my previous article&lt;/a&gt;, starting from &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/amq" target="_blank" rel="noopener noreferrer"&gt;Red Hat AMQ Streams&lt;/a&gt; 1.4, it is finally possible to use your own custom certificate for encrypting communication between Kafka clients and brokers—without the requirement to provide a CA certificate. The auto-generated and -managed internal CAs will still remain, but only to protect inter-cluster communication.&lt;/p&gt; &lt;p&gt;The user-provided certificate can be used with all listeners that have TLS encryption enabled, such as the route, load balancer, ingress, and NodePort types. In this complete example, we will enable an external route listener for one-way TLS authentication.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;You need to have the following in place before you can proceed:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An OpenShift cluster up and running.&lt;/li&gt; &lt;li&gt;A custom X.509 certificate in PEM format (with required SANs).&lt;/li&gt; &lt;li&gt;An active &lt;a href="https://access.redhat.com/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Customer Portal&lt;/a&gt; account.&lt;/li&gt; &lt;li&gt;The &lt;a href="https://access.redhat.com/jbossnetwork/restricted/softwareDetail.html?softwareId=79761&amp;#38;product=jboss.amq.streams&amp;#38;version=1.4.0&amp;#38;downloadType=distributions" target="_blank" rel="noopener noreferrer"&gt;Red Hat AMQ Streams 1.4.0 Installation and Example package&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;An OpenShift user with the &lt;code&gt;cluster-admin&lt;/code&gt; role.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span id="more-691357"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The procedure&lt;/h2&gt; &lt;p&gt;Before we start, let&amp;#8217;s define a few handy variables:&lt;/p&gt; &lt;pre&gt;$ USER="developer" $ PROJECT="streams" $ CA_USER="system:admin" $ RA_SECRET="reg-auth-secret" $ CLUSTER="my-cluster" &lt;/pre&gt; &lt;p&gt;The first step is to log in as &lt;code&gt;cluster-admin&lt;/code&gt; and create a new project. We need this role because we have to install the &lt;em&gt;custom resource definitions (CRDs)&lt;/em&gt; that are required by the &lt;em&gt;Cluster Operator (CO)&lt;/em&gt;. We then give full admin rights to the user for managing the project once it&amp;#8217;s ready:&lt;/p&gt; &lt;pre&gt;$ oc login -u $CA_USER $ oc new-project $PROJECT $ oc adm policy add-role-to-user admin $USER &lt;/pre&gt; &lt;p&gt;To be able to download images from the &lt;a href="https://registry.access.redhat.com/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Container Registry&lt;/a&gt;, we also need to add an authentication Secret (use your credentials here):&lt;/p&gt; &lt;pre&gt;$ oc create secret docker-registry $RA_SECRET \ --docker-server=registry.redhat.io \ --docker-username= \ --docker-password= &lt;/pre&gt; &lt;p&gt;Then, unzip the installation and examples distribution package (with the name ending in &lt;code&gt;-install-examples.zip&lt;/code&gt;) and replace the default project’s name with yours:&lt;/p&gt; &lt;pre&gt;$ TMP="/tmp/$PROJECT" &amp;#38;&amp;#38; rm -rf $TMP &amp;#38;&amp;#38; mkdir -p $TMP $ unzip -qq amq-streams-1.4.0-ocp-install-examples.zip -d $TMP $ sed -i -e "s/namespace: .*/namespace: $PROJECT/g" $TMP/install/cluster-operator/*RoleBinding*.yaml &lt;/pre&gt; &lt;p&gt;Now, we are ready to install all required CRDs and the Strimzi CO:&lt;/p&gt; &lt;pre&gt;$ oc apply -f $TMP/install/cluster-operator $ oc secrets link strimzi-cluster-operator $RA_SECRET --for=pull $ oc set env deploy/strimzi-cluster-operator STRIMZI_IMAGE_PULL_SECRETS=$RA_SECRET $ oc set env deploy/strimzi-cluster-operator STRIMZI_NAMESPACE=$PROJECT $ oc apply -f $install_dir/strimzi-admin $ oc adm policy add-cluster-role-to-user strimzi-admin $USER &lt;/pre&gt; &lt;h3&gt;Test cluster creation&lt;/h3&gt; &lt;p&gt;Here we create a small test cluster with a topic just for the sake of this example (this cluster is not suitable for production):&lt;/p&gt; &lt;pre&gt;$ oc create -f - &amp;#60;&amp;#60;EOF apiVersion: kafka.strimzi.io/v1alpha1 kind: Kafka metadata: name: my-cluster spec: kafka: version: "2.3.1" replicas: 3 config: log.message.format.version: "2.3" logging: type: inline loggers: log4j.logger.kafka.controller: INFO log4j.logger.kafka.authorizer.logger: INFO listeners: plain: {} external: type: route readinessProbe: initialDelaySeconds: 30 timeoutSeconds: 10 livenessProbe: initialDelaySeconds: 30 timeoutSeconds: 10 template: pod: terminationGracePeriodSeconds: 120 storage: type: persistent-claim size: "1Gi" resources: requests: cpu: "1000m" memory: "2Gi" limits: cpu: "1000m" memory: "2Gi" tlsSidecar: resources: limits: cpu: "100m" memory: "128Mi" requests: cpu: "100m" memory: "128Mi" zookeeper: replicas: 3 readinessProbe: initialDelaySeconds: 15 timeoutSeconds: 5 livenessProbe: initialDelaySeconds: 15 timeoutSeconds: 5 storage: type: persistent-claim size: "1Gi" resources: requests: cpu: "500m" memory: "1Gi" limits: cpu: "500m" memory: "1Gi" tlsSidecar: resources: limits: cpu: "100m" memory: "128Mi" requests: cpu: "100m" memory: "128Mi" entityOperator: topicOperator: resources: limits: cpu: "250m" memory: "256Mi" requests: cpu: "250m" memory: "256Mi" userOperator: resources: limits: cpu: "250m" memory: "256Mi" requests: cpu: "250m" memory: "256Mi" tlsSidecar: resources: limits: cpu: "100m" memory: "128Mi" requests: cpu: "100m" memory: "128Mi" EOF &lt;/pre&gt; &lt;p&gt;After running the previous command, wait for the cluster to be up and running.&lt;/p&gt; &lt;h3&gt;Custom certificate configuration&lt;/h3&gt; &lt;p&gt;At this point, you should already have the following files:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;rootca.pem&lt;/code&gt; &amp;#8211; Root Certificate Authority (CA) of your domain (optional).&lt;/li&gt; &lt;li&gt;&lt;code&gt;intermca.pem&lt;/code&gt; &amp;#8211; Intermediate CA used to sign sub-domain certs (optional).&lt;/li&gt; &lt;li&gt;&lt;code&gt;server.pem&lt;/code&gt; &amp;#8211; Custom certificate to use for the external route listener.&lt;/li&gt; &lt;li&gt;&lt;code&gt;server-prk.pem&lt;/code&gt; &amp;#8211; The private key of custom certificate.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As we will see, if you are not using a self-signed certificate, then you can provide a certificate that includes the whole chain of trust (e.g., rootca + intermca + server).&lt;/p&gt; &lt;p&gt;The most important point to remember here is that your custom certificate must include the correct Subject Alternative Names (SANs). This means having one entry for the bootstrap route and one entry for each broker. You can easily find these by looking at the route&amp;#8217;s HOST/PORT column:&lt;/p&gt; &lt;pre&gt;$ oc get routes NAME HOST/PORT my-cluster-kafka-0 my-cluster-kafka-0-amqstr.192.168.64.96.nip.io my-cluster-kafka-bootstrap my-cluster-kafka-bootstrap-amqstr.192.168.64.96.nip.io &lt;/pre&gt; &lt;p&gt;In this specific environment, the PEM file must have the following extensions:&lt;/p&gt; &lt;pre&gt;$ openssl x509 -inform pem -in server.pem -noout -text # ... X509v3 extensions: X509v3 Basic Constraints: critical CA:FALSE X509v3 Key Usage: Digital Signature, Key Encipherment X509v3 Extended Key Usage: TLS Web Server Authentication, TLS Web Client Authentication X509v3 Subject Alternative Name: DNS:my-cluster-kafka-bootstrap-amqstr.192.168.64.96.nip.io, DNS:my-cluster-kafka-0-amqstr.192.168.64.96.nip.io &lt;/pre&gt; &lt;p&gt;Once ready, we can create/update the Secret that will host our custom certificate:&lt;/p&gt; &lt;pre&gt;$ cat server.pem intermca.pem rootca.pem &amp;#62; fullchain.pem $ oc create secret generic listener-cert \ --from-file=server-prk.pem --from-file=fullchain.pem \ --dry-run -o yaml | oc replace --force -f - &lt;/pre&gt; &lt;p&gt;Finally, we just need to configure the external listener by editing the cluster definition and waiting for the rolling update to complete:&lt;/p&gt; &lt;pre&gt;$ oc edit kafka $CLUSTER spec: kafka: # ... listeners: plain: {} external: type: route configuration: brokerCertChainAndKey: secretName: listener-cert certificate: fullchain.pem key: server-prk.pem &lt;/pre&gt; &lt;h3&gt;Java client setup&lt;/h3&gt; &lt;p&gt;Create the truststore in Java KeyStore (JKS) format in order to verify the identity of the Kafka broker (one-way TLS authentication). Clients only need to trust the root CA public key, regardless of the depth of the chain of trust:&lt;/p&gt; &lt;pre&gt;$ keytool -import -noprompt -trustcacerts -alias rootca -file rootca.pem -keystore client-ts.jks -storepass secret &lt;/pre&gt; &lt;p&gt;To access Kafka from outside OpenShift, you also need to use this bootstrap URL:&lt;/p&gt; &lt;pre&gt;$ echo $(oc get routes $CLUSTER-kafka-bootstrap -o=jsonpath='{.status.ingress[0].host}{"\n"}'):443 &lt;/pre&gt; &lt;h2&gt;Additional notes&lt;/h2&gt; &lt;p&gt;Remember that custom certificates are not managed by the Cluster Operator, so you will have to manually update the OpenShift Secret and clients&amp;#8217; truststores during the renewal process. If you update a Kafka listener certificate in a Secret that is already used by a TLS or external listener, a cluster rolling update is also started.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F01%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift-update%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift%20%28update%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F01%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift-update%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift%20%28update%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F01%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift-update%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift%20%28update%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F01%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift-update%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift%20%28update%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F01%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift-update%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift%20%28update%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F01%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift-update%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift%20%28update%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F01%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift-update%2F&amp;#38;linkname=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift%20%28update%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F01%2Fset-up-red-hat-amq-streams-custom-certificates-on-openshift-update%2F&amp;#038;title=Set%20up%20Red%20Hat%20AMQ%20Streams%20custom%20certificates%20on%20OpenShift%20%28update%29" data-a2a-url="https://developers.redhat.com/blog/2020/04/01/set-up-red-hat-amq-streams-custom-certificates-on-openshift-update/" data-a2a-title="Set up Red Hat AMQ Streams custom certificates on OpenShift (update)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/01/set-up-red-hat-amq-streams-custom-certificates-on-openshift-update/"&gt;Set up Red Hat AMQ Streams custom certificates on OpenShift (update)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/uIPrrRkUndA" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;As anticipated in the &amp;#8220;Additional notes&amp;#8221; section of my previous article, starting from Red Hat AMQ Streams 1.4, it is finally possible to use your own custom certificate for encrypting communication between Kafka clients and brokers—without the requirement to provide a CA certificate. The auto-generated and -managed internal CAs will still remain, but only to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/01/set-up-red-hat-amq-streams-custom-certificates-on-openshift-update/"&gt;Set up Red Hat AMQ Streams custom certificates on OpenShift (update)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">691357</post-id><dc:creator>Federico Valeri</dc:creator><dc:date>2020-04-01T07:00:41Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/01/set-up-red-hat-amq-streams-custom-certificates-on-openshift-update/</feedburner:origLink></entry><entry><title>Running an event-driven health management business process through a few scenarios: Part 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rBnait8f9co/" /><category term="Event-Driven" /><category term="Java" /><category term="Modern App Dev" /><category term="Stream Processing" /><category term="business automation" /><category term="digital process automation" /><category term="jBPM" /><category term="maven" /><category term="RHPAM" /><author><name>mcarioli</name></author><id>https://developers.redhat.com/blog/?p=691127</id><updated>2020-03-31T07:00:54Z</updated><published>2020-03-31T07:00:54Z</published><content type="html">&lt;p&gt;In the previous series of articles, &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/" target="_blank" rel="noopener noreferrer"&gt;Designing an event-driven business process at scale: A health management example&lt;/a&gt;&lt;/em&gt; (which you need to read to fully understand this one), you designed and implemented an event-driven scalable business process for the population health management use case. Now, you will run this process through a few scenarios. In this way, you will:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Gain a solid understanding of how the business process works.&lt;/li&gt; &lt;li&gt;Have a chance of validating if your implementation is correct.&lt;/li&gt; &lt;li&gt;Learn how to wire the user interface of the business application driven by the business process.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Ultimately, this series is a demonstration of a population health management solution encompassing several technologies besides business process management (BPM), such as decision management (business rules), streaming data, monitoring and analytics, etc. Future posts will cover how to implement and integrate the various components.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;You need to have &lt;a href="https://openjdk.java.net/" target="_blank" rel="noopener noreferrer"&gt;Java&lt;/a&gt;, &lt;a href="https://git-scm.com/" target="_blank" rel="noopener noreferrer"&gt;Git&lt;/a&gt;, and &lt;a href="https://maven.apache.org/" target="_blank" rel="noopener noreferrer"&gt;Maven&lt;/a&gt; installed to follow along with this article. To ensure that you have a compatible version of Java, run the following on the console (either version 8 or 11 will do):&lt;/p&gt; &lt;pre&gt;$ java -version&lt;/pre&gt; &lt;p&gt;You also need to be able to &lt;a href="https://www.jbpm.org/learn/gettingStarted.html" target="_blank" rel="noopener noreferrer"&gt;download, install, and run jBPM&lt;/a&gt; on your system. In this article, I assume that the directory where jBPM is installed is &lt;code&gt;jbpm-server-7.33.0.Final-dist&lt;/code&gt;. However, you should use the actual name you get after you unzip the jBPM single zip distribution.&lt;/p&gt; &lt;h2&gt;Event listeners&lt;/h2&gt; &lt;p&gt;Now, make sure that jBPM is not running. If you started it, just stop it or kill it. You need to clone the Git repositories that contain the projects housing the event listeners that you will use to trace process activity:&lt;/p&gt; &lt;pre&gt;$ git clone git@github.com:mauriziocarioli/Tracing.git Cloning into 'Tracing'... remote: Enumerating objects: 135, done. remote: Counting objects: 100% (135/135), done. remote: Compressing objects: 100% (61/61), done. remote: Total 135 (delta 66), reused 122 (delta 53), pack-reused 0 Receiving objects: 100% (135/135), 50.28 KiB | 1.03 MiB/s, done. Resolving deltas: 100% (66/66), done. $ git clone git@github.com:mauriziocarioli/PHM-Tracing.git Cloning into 'PHM-Tracing'... remote: Enumerating objects: 58, done. remote: Counting objects: 100% (58/58), done. remote: Compressing objects: 100% (27/27), done. remote: Total 58 (delta 28), reused 53 (delta 23), pack-reused 0 Receiving objects: 100% (58/58), 21.15 KiB | 21.15 MiB/s, done. Resolving deltas: 100% (28/28), done. &lt;/pre&gt; &lt;p&gt;Go into the &lt;code&gt;Tracing&lt;/code&gt; directory and run:&lt;/p&gt; &lt;pre&gt;$ mvn install [INFO] Scanning for projects... [INFO] [INFO] -------------------&amp;#60; com.redhat.batigerteam:tracing &amp;#62;------------------- [INFO] Building tracing 1.0.0 [INFO] --------------------------------[ jar ]--------------------------------- &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The first time you run this, it will download many jar files from the Maven central repository, which can take a long time.&lt;/p&gt; &lt;p&gt;After the &lt;code&gt;mvn install&lt;/code&gt; finishes successfully, copy &lt;code&gt;target/tracing-1.0.0.jar&lt;/code&gt; into &lt;code&gt;jbpm-server-7.33.0.Final-dist/standalone/deployments/kie-server.war/WEB-INF/lib&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Now go up and into the &lt;code&gt;PHM-Tracing&lt;/code&gt; directory. Run &lt;code&gt;mvn install&lt;/code&gt; again and then copy &lt;code&gt;target/phm-tracing-1.0.0.jar&lt;/code&gt; into the same directory as the previous jar file.&lt;/p&gt; &lt;p&gt;Congratulations, you installed the tracing jars.&lt;/p&gt; &lt;h2&gt;jBPM projects&lt;/h2&gt; &lt;p&gt;Now, start jBPM. For example, on either a Mac or Linux, run:&lt;/p&gt; &lt;pre&gt;$ jbpm-server-7.33.0.Final-dist/bin/standalone.sh -c standalone.xml -b 0.0.0.0&lt;/pre&gt; &lt;p&gt;Or on Windows, run:&lt;/p&gt; &lt;pre&gt;$ jbpm-server-7.33.0.Final-dist/bin/standalone.bat -c standalone.xml -b 0.0.0.0&lt;/pre&gt; &lt;p&gt;If you worked your way through &lt;a href="https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/" target="_blank" rel="noopener noreferrer"&gt;the previous series&lt;/a&gt;, you already know how to do what follows. Even so, this information will be useful to you in case you want to restart from scratch without having to redo your implementation.&lt;/p&gt; &lt;p&gt;There are two scripts in the &lt;code&gt;src/main/sh&lt;/code&gt; directory of the project &lt;code&gt;PHM-Processes&lt;/code&gt;. If you are on either macOS or Linux, run the script &lt;code&gt;add-users.sh&lt;/code&gt;. If you are on Windows (with PowerShell) run &lt;code&gt;add-users.ps1&lt;/code&gt;. These scripts create all of the users and groups needed to test these scenarios.&lt;/p&gt; &lt;p&gt;After jBPM has started, open your browser, go to &lt;code&gt;http://localhost:8080/business-central/kie-wb.jsp&lt;/code&gt;, and log in as &lt;code&gt;wbadmin&lt;/code&gt; with the password &lt;code&gt;wbadmin&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Set up your space&lt;/h3&gt; &lt;p&gt;In &lt;strong&gt;Business Central&lt;/strong&gt; (Figure 1), find the &lt;strong&gt;Design&lt;/strong&gt; section and click the &lt;strong&gt;projects&lt;/strong&gt; link. This is where processes are designed and implemented.&lt;/p&gt; &lt;div id="attachment_691137" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-691137" class="wp-image-691137 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-20_14-34-40-1024x506.png" alt="jBPM's Business Central -&amp;#62; Design -&amp;#62; projects" width="640" height="316" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-20_14-34-40-1024x506.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-20_14-34-40-300x148.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-20_14-34-40-768x379.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-20_14-34-40.png 1178w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-691137" class="wp-caption-text"&gt;Figure 1: Start designing your jBPM project.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You will find yourself at the &lt;em&gt;spaces&lt;/em&gt; level of the &lt;strong&gt;Design&lt;/strong&gt; section. &lt;em&gt;Design artifacts&lt;/em&gt; are organized in &lt;em&gt;projects&lt;/em&gt; which are found in &lt;em&gt;spaces&lt;/em&gt;. It&amp;#8217;s a basic organizational hierarchy where selective permissions can be applied both at the space and project levels. You need to create a new space named &lt;strong&gt;Health-Insurance&lt;/strong&gt; and then enter this space, so the top path of any design artifacts in the projects within will be &lt;code&gt;com/health_insurance&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Add the sample projects&lt;/h3&gt; &lt;p&gt;In the space &lt;strong&gt;Health-Insurance&lt;/strong&gt;, click the &lt;strong&gt;Add Project&lt;/strong&gt; drop-down list and select &lt;strong&gt;Import Project&lt;/strong&gt; as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_691147" style="width: 293px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-691147" class="wp-image-691147 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-20_14-36-19.png" alt="jBPM space configuration Add Project -&amp;#62; Import Project" width="283" height="400" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-20_14-36-19.png 283w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-20_14-36-19-212x300.png 212w" sizes="(max-width: 283px) 100vw, 283px" /&gt;&lt;p id="caption-attachment-691147" class="wp-caption-text"&gt;Figure 2: Import a project into the space.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Then, enter the GitHub link to the &lt;a href="https://github.com/mauriziocarioli/PHM-Model.git" target="_blank" rel="noopener noreferrer"&gt;Git project repository containing the data model&lt;/a&gt; as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_691157" style="width: 605px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-691157" class="wp-image-691157 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-20_14-37-34.png" alt="jBPM Import Project -&amp;#62; Repository URL" width="595" height="241" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-20_14-37-34.png 595w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-20_14-37-34-300x122.png 300w" sizes="(max-width: 595px) 100vw, 595px" /&gt;&lt;p id="caption-attachment-691157" class="wp-caption-text"&gt;Figure 3: Enter the data model project&amp;#8217;s Git repository URL.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click &lt;strong&gt;Import&lt;/strong&gt; to continue. Now, repeat the project import this time with the &lt;a href="https://github.com/mauriziocarioli/PHM-Processes.git" target="_blank" rel="noopener noreferrer"&gt;Git repository containing the business process and subprocesses&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You now have two projects in the &lt;strong&gt;Health-Insurance&lt;/strong&gt; space (Figure 4).&lt;/p&gt; &lt;div id="attachment_691167" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-28-02.png"&gt;&lt;img aria-describedby="caption-attachment-691167" class="wp-image-691167" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-28-02.png" alt="jBPM Business Central -&amp;#62; Spaces -&amp;#62; Health-Insurance -&amp;#62; Projects" width="640" height="333" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-28-02.png 969w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-28-02-300x156.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-28-02-768x399.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-691167" class="wp-caption-text"&gt;Figure 4: One space containing multiple projects.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Deploy the projects and servers&lt;/h3&gt; &lt;p&gt;Go into the &lt;strong&gt;PHM-Model&lt;/strong&gt; project, wait for indexing to complete, and then click the &lt;strong&gt;Deploy&lt;/strong&gt; button as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_691177" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-35-34.png"&gt;&lt;img aria-describedby="caption-attachment-691177" class="wp-image-691177" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-35-34.png" alt="The jBPM Health-Insurance space -&amp;#62; PHM Model -&amp;#62; Master with the Assets tab displayed" width="639" height="350" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-35-34.png 969w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-35-34-300x164.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-35-34-768x421.png 768w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-691177" class="wp-caption-text"&gt;Figure 5: Deploy the &lt;strong&gt;PHM-Model&lt;/strong&gt; project.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Deploy the &lt;strong&gt;PHM-Processes&lt;/strong&gt; project in the same manner. Then, go to &lt;strong&gt;Business Central&lt;/strong&gt;&amp;#8216;s, find the &lt;strong&gt;Deploy&lt;/strong&gt; section, and click &lt;strong&gt;servers&lt;/strong&gt; (Figure 6).&lt;/p&gt; &lt;div id="attachment_691187" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-691187" class="wp-image-691187 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-43-34-1024x465.png" alt="jBPM Business Central -&amp;#62; Deploy -&amp;#62; servers" width="640" height="291" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-43-34-1024x465.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-43-34-300x136.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-43-34-768x349.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_09-43-34.png 1170w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-691187" class="wp-caption-text"&gt;Figure 6: Start designing your jBPM project&amp;#8217;s servers.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You should see the two deployment units shown in Figure 7. These are custom jar files (kjar files) containing the executable artifacts of each project deployed to the process server (or KIE server).&lt;/p&gt; &lt;div id="attachment_691217" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_10-02-09.png"&gt;&lt;img aria-describedby="caption-attachment-691217" class="wp-image-691217 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_10-02-09-1024x502.png" alt="Business Central -&amp;#62; Server configurations and deployment units" width="640" height="314" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_10-02-09-1024x502.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_10-02-09-300x147.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_10-02-09-768x376.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/2020-02-24_10-02-09.png 1126w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-691217" class="wp-caption-text"&gt;Figure 7: View the deployment units that this server is running.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Clone the Get the Data repository&lt;/h3&gt; &lt;p&gt;You are almost done with setting everything up. &lt;a href="https://gist.github.com/mauriziocarioli/62675d8759c4126f8e1a586a9d567bea" target="_blank" rel="noopener noreferrer"&gt;You just need&lt;/a&gt; to clone the Get the Data service REST API&amp;#8217;s Git repository (described in &lt;a href="https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/" target="_blank" rel="noopener noreferrer"&gt;the previous series&lt;/a&gt;), install the dependencies, and start the service on Node.js:&lt;/p&gt; &lt;pre&gt;4&amp;#62; git clone https://github.com/mauriziocarioli/PHM-API.git Cloning into 'PHM-API'... remote: Enumerating objects: 17, done. remote: Counting objects: 100% (17/17), done. remote: Compressing objects: 100% (13/13), done. remote: Total 17 (delta 6), reused 15 (delta 4), pack-reused 0 Unpacking objects: 100% (17/17), done. [ec2-user@ip-172-31-33-184.ec2.internal/~/Demos] 5&amp;#62; cd PHM-API [ec2-user@ip-172-31-33-184.ec2.internal/~/Demos/PHM-API] 6&amp;#62; ls -al total 44 drwxrwxr-x. 3 ec2-user ec2-user 127 Feb 5 15:23 . drwxrwxr-x. 10 ec2-user ec2-user 236 Feb 5 15:23 .. -rw-rw-r--. 1 ec2-user ec2-user 3636 Feb 5 15:23 app.js drwxrwxr-x. 8 ec2-user ec2-user 163 Feb 5 15:23 .git -rw-rw-r--. 1 ec2-user ec2-user 256 Feb 5 15:23 .gitignore -rw-rw-r--. 1 ec2-user ec2-user 11357 Feb 5 15:23 LICENSE -rw-rw-r--. 1 ec2-user ec2-user 360 Feb 5 15:23 package.json -rw-rw-r--. 1 ec2-user ec2-user 14282 Feb 5 15:23 package-lock.json -rw-rw-r--. 1 ec2-user ec2-user 595 Feb 5 15:23 README.md [ec2-user@ip-172-31-33-184.ec2.internal/~/Demos/PHM-API] 7&amp;#62; npm install npm WARN phmapi@1.0.0 No repository field. added 50 packages from 37 contributors and audited 158 packages in 0.781s found 0 vulnerabilities [ec2-user@ip-172-31-33-184.ec2.internal/~/Demos/PHM-API] 8&amp;#62; npm start &amp;#62; phmapi@1.0.0 start /home/ec2-user/Demos/PHM-API &amp;#62; node app.js running at port 3200 &lt;/pre&gt; &lt;h2&gt;Conclusions&lt;/h2&gt; &lt;p&gt;Before you could run some scenarios of this Population Health Management application you needed to install and configure several components.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The event listeners, which are very important to monitor as well as react to the activities in the process.&lt;/li&gt; &lt;li&gt;The jBPM projects themselves.&lt;/li&gt; &lt;li&gt;The Node.js REST service that is used to provide the data needed by the jBPM processes to execute.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Now you are ready to go through the scenarios in &lt;a href="https://developers.redhat.com/blog/?p=691237&amp;#38;preview=true"&gt;the next post&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F31%2Frunning-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20a%20few%20scenarios%3A%20Part%201" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F31%2Frunning-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20a%20few%20scenarios%3A%20Part%201" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F31%2Frunning-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20a%20few%20scenarios%3A%20Part%201" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F31%2Frunning-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20a%20few%20scenarios%3A%20Part%201" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F31%2Frunning-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20a%20few%20scenarios%3A%20Part%201" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F31%2Frunning-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20a%20few%20scenarios%3A%20Part%201" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F31%2Frunning-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1%2F&amp;#38;linkname=Running%20an%20event-driven%20health%20management%20business%20process%20through%20a%20few%20scenarios%3A%20Part%201" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F31%2Frunning-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1%2F&amp;#038;title=Running%20an%20event-driven%20health%20management%20business%20process%20through%20a%20few%20scenarios%3A%20Part%201" data-a2a-url="https://developers.redhat.com/blog/2020/03/31/running-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1/" data-a2a-title="Running an event-driven health management business process through a few scenarios: Part 1"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/31/running-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1/"&gt;Running an event-driven health management business process through a few scenarios: Part 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rBnait8f9co" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In the previous series of articles, Designing an event-driven business process at scale: A health management example (which you need to read to fully understand this one), you designed and implemented an event-driven scalable business process for the population health management use case. Now, you will run this process through a few scenarios. In this [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/31/running-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1/"&gt;Running an event-driven health management business process through a few scenarios: Part 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">691127</post-id><dc:creator>mcarioli</dc:creator><dc:date>2020-03-31T07:00:54Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/31/running-an-event-driven-health-management-business-process-through-a-few-scenarios-part-1/</feedburner:origLink></entry><entry><title>JBoss Tools 4.15.0.AM1 for Eclipse 2020-03</title><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/jbossbuzz/~3/bZSyBqbn4DY/4.15.0.am1.html" /><category term="release" /><category term="jbosstools" /><category term="devstudio" /><category term="jbosscentral" /><author><name>jeffmaury</name></author><id>https://tools.jboss.org/blog/4.15.0.am1.html</id><updated>2020-04-01T15:04:10Z</updated><published>2020-03-31T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Happy to announce 4.15.0.AM1 (Developer Milestone 1) build for Eclipse 2020-03.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Downloads available at &lt;a href="https://tools.jboss.org/downloads/jbosstools/2020-03/4.15.0.AM1.html"&gt;JBoss Tools 4.15.0 AM1&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-new"&gt;&lt;a class="anchor" href="#what-is-new"&gt;&lt;/a&gt;What is New?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Full info is at &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.15.0.AM1.html"&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please note that a regression has been found in the Fuse Tools. This is going to be fixed for the release (4.15.0.Final). Please find more information in this &lt;a href="https://issues.redhat.com/browse/FUSETOOLS-3333"&gt;ticket&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="quarkus-tools"&gt;&lt;a class="anchor" href="#quarkus-tools"&gt;&lt;/a&gt;Quarkus Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="language-support-for-kubernetes-openshift-s2i-and-docker-properties"&gt;&lt;a class="anchor" href="#language-support-for-kubernetes-openshift-s2i-and-docker-properties"&gt;&lt;/a&gt;Language support for Kubernetes, Openshift, S2i and Docker properties&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There is now completion, hover, documentation and validation for kubernetes.&lt;strong&gt;, openshift.&lt;/strong&gt;, s2i.&lt;strong&gt;, docker.&lt;/strong&gt; properties&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="./images/quarkus20.png" alt="quarkus20" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enter &lt;code&gt;kubernetes&lt;/code&gt; prefix:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus21.png" alt="quarkus21" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enter &lt;code&gt;openshift&lt;/code&gt; prefix:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus22.png" alt="quarkus22" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enter &lt;code&gt;s2i&lt;/code&gt; prefix:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus23.png" alt="quarkus23" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="language-support-for-microprofile-rest-client-properties"&gt;&lt;a class="anchor" href="#language-support-for-microprofile-rest-client-properties"&gt;&lt;/a&gt;Language support for MicroProfile REST Client properties&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Likewise, there is now completion, hover, documentation and validation for the MicroProfile properties from REST Client.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;After registering a REST client using &lt;code&gt;@RegisterRestClient&lt;/code&gt; like so:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;package org.acme; import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.core.Response; import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; @RegisterRestClient public interface MyServiceClient { @GET @Path(&amp;quot;/greet&amp;quot;) Response greet(); }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The related MicroProfile Rest config properties will have language feature support (completion, hover, validation, etc.).&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus24.png" alt="quarkus24" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Change the Java code so that the configuration key is changed:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;package org.acme; import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.core.Response; import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; @RegisterRestClient(configKey = &amp;quot;myclient&amp;quot;) public interface MyServiceClient { @GET @Path(&amp;quot;/greet&amp;quot;) Response greet(); }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;and notice the code assist is changed accordingly:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus25.png" alt="quarkus25" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="language-support-for-microprofile-health"&gt;&lt;a class="anchor" href="#language-support-for-microprofile-health"&gt;&lt;/a&gt;Language support for MicroProfile Health&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Likewise, there is now completion, hover, documentation and validation for the MicroProfile Health artifacts.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;So if you have the following Health class:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;package org.acme; import org.eclipse.microprofile.health.Health; @Health public class MyHealth { }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;you will get a validation error (as the class does not implement the &lt;code&gt;HealthCheck&lt;/code&gt; interface:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus26.png" alt="quarkus26" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Similarely, if you have a class that implements &lt;code&gt;HealthCheck&lt;/code&gt; but is not annotated with &lt;code&gt;Health&lt;/code&gt;, some workflow applies:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;package org.acme; import org.eclipse.microprofile.health.HealthCheck; import org.eclipse.microprofile.health.HealthCheckResponse; public class MyHealth implements HealthCheck { @Override public HealthCheckResponse call() { // TODO Auto-generated method stub return null; } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;you will get a validation error (as the class is not annotated with &lt;code&gt;Health&lt;/code&gt; interface:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus27.png" alt="quarkus27" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As there are several ways to fix the problem, then several quick fixes are proposed.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="server-tools"&gt;&lt;a class="anchor" href="#server-tools"&gt;&lt;/a&gt;Server Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="wildfly-19-server-adapter"&gt;&lt;a class="anchor" href="#wildfly-19-server-adapter"&gt;&lt;/a&gt;Wildfly 19 Server Adapter&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A server adapter has been added to work with Wildfly 19. It adds support for Java EE 8, Jakarta EE 8 and Microprofile 3.3.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please note that while creating a Wildfly 19 server adapter, you may get a warning. This is going to be fixed for the release.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;Related JIRA: &lt;a href="https://issues.jboss.org/browse/JBIDE-27092"&gt;JBIDE-27092&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="eap-7-3-server-adapter"&gt;&lt;a class="anchor" href="#eap-7-3-server-adapter"&gt;&lt;/a&gt;EAP 7.3 Server Adapter&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The server adapter has been adapted to work with EAP 7.3.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Jeff Maury&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/bZSyBqbn4DY" height="1" width="1" alt=""/&gt;</content><summary>Happy to announce 4.15.0.AM1 (Developer Milestone 1) build for Eclipse 2020-03. Downloads available at JBoss Tools 4.15.0 AM1. What is New? Full info is at this page. Some highlights are below. Please note that a regression has been found in the Fuse Tools. This is going to be fixed for the release (4.15.0.Final). Please find more information in this ticket. Quarkus Tools Language support for Kubernetes, Openshift, S2i and Docker properties There is now completion, hover, documentation and validation for kubernetes., openshift., s2i., docker. properties Enter kubernetes prefix: Enter openshift prefix: Enter s2i prefix: Language support for MicroProfile REST Client properties Likewise, there is now completion, hover, documentation and validation for the MicroProfile properties from REST...</summary><dc:creator>jeffmaury</dc:creator><dc:date>2020-03-31T00:00:00Z</dc:date><feedburner:origLink>https://tools.jboss.org/blog/4.15.0.am1.html</feedburner:origLink></entry><entry><title>Distribute your microservices data with events, CQRS, and event sourcing</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_ML0K_ObX14/" /><category term="DevNation" /><category term="Event-Driven" /><category term="Events" /><category term="Java" /><category term="Microservices" /><category term="CQRS" /><category term="distributed data" /><category term="kafka" /><category term="monolithic" /><author><name>Edson Yanaga</name></author><id>https://developers.redhat.com/blog/?p=701597</id><updated>2020-03-30T07:00:22Z</updated><published>2020-03-30T07:00:22Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about distributing your microservices data with events, Command Query Responsibility Segregation (CQRS), and event sourcing from &lt;a href="https://developers.redhat.com/blog/author/yanaga/" target="_blank" rel="noopener noreferrer"&gt;Edson Yanaga&lt;/a&gt;, Red Hat&amp;#8217;s Director of Developer Experience.&lt;/p&gt; &lt;p&gt;You split up your monolithic codebase into smaller artifacts and thought you were done! Now you’ve reached the hardest part: How do you split your data, and how do you keep your system working with it?&lt;/p&gt; &lt;p&gt;In this session, we explore how events with an event-driven architecture can help you succeed in this distributed data world. Learn concepts like CQRS, event sourcing, and how you can use them in a distributed architecture with REST, message brokers, and Apache Kafka.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/HdvWfr2KwA0" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Join us at an upcoming &lt;a href="https://developers.redhat.com/events/" target="_blank" rel="noopener noreferrer"&gt;developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0" target="_blank" rel="noopener noreferrer"&gt;past DevNation Tech Talks&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F30%2Fdistribute-your-microservices-data-with-events-cqrs-and-event-sourcing%2F&amp;#38;linkname=Distribute%20your%20microservices%20data%20with%20events%2C%20CQRS%2C%20and%20event%20sourcing" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F30%2Fdistribute-your-microservices-data-with-events-cqrs-and-event-sourcing%2F&amp;#38;linkname=Distribute%20your%20microservices%20data%20with%20events%2C%20CQRS%2C%20and%20event%20sourcing" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F30%2Fdistribute-your-microservices-data-with-events-cqrs-and-event-sourcing%2F&amp;#38;linkname=Distribute%20your%20microservices%20data%20with%20events%2C%20CQRS%2C%20and%20event%20sourcing" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F30%2Fdistribute-your-microservices-data-with-events-cqrs-and-event-sourcing%2F&amp;#38;linkname=Distribute%20your%20microservices%20data%20with%20events%2C%20CQRS%2C%20and%20event%20sourcing" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F30%2Fdistribute-your-microservices-data-with-events-cqrs-and-event-sourcing%2F&amp;#38;linkname=Distribute%20your%20microservices%20data%20with%20events%2C%20CQRS%2C%20and%20event%20sourcing" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F30%2Fdistribute-your-microservices-data-with-events-cqrs-and-event-sourcing%2F&amp;#38;linkname=Distribute%20your%20microservices%20data%20with%20events%2C%20CQRS%2C%20and%20event%20sourcing" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F30%2Fdistribute-your-microservices-data-with-events-cqrs-and-event-sourcing%2F&amp;#38;linkname=Distribute%20your%20microservices%20data%20with%20events%2C%20CQRS%2C%20and%20event%20sourcing" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F30%2Fdistribute-your-microservices-data-with-events-cqrs-and-event-sourcing%2F&amp;#038;title=Distribute%20your%20microservices%20data%20with%20events%2C%20CQRS%2C%20and%20event%20sourcing" data-a2a-url="https://developers.redhat.com/blog/2020/03/30/distribute-your-microservices-data-with-events-cqrs-and-event-sourcing/" data-a2a-title="Distribute your microservices data with events, CQRS, and event sourcing"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/30/distribute-your-microservices-data-with-events-cqrs-and-event-sourcing/"&gt;Distribute your microservices data with events, CQRS, and event sourcing&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_ML0K_ObX14" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about distributing your microservices data with events, Command Query Responsibility Segregation (CQRS), and event sourcing from Edson Yanaga, Red Hat&amp;#8217;s Director [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/30/distribute-your-microservices-data-with-events-cqrs-and-event-sourcing/"&gt;Distribute your microservices data with events, CQRS, and event sourcing&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">701597</post-id><dc:creator>Edson Yanaga</dc:creator><dc:date>2020-03-30T07:00:22Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/30/distribute-your-microservices-data-with-events-cqrs-and-event-sourcing/</feedburner:origLink></entry><entry><title>Red Hat XML language server becomes LemMinX, bringing new release and updated VS Code XML extension</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/__M7AW5kpqo/" /><category term="Java" /><category term="Programming Languages" /><category term="VS Code" /><category term="Eclipse" /><category term="language server" /><category term="LemMinX" /><category term="schema validation" /><category term="xml" /><author><name>David Kwon</name></author><id>https://developers.redhat.com/blog/?p=699007</id><updated>2020-03-27T07:00:40Z</updated><published>2020-03-27T07:00:40Z</published><content type="html">&lt;p&gt;A new era has begun for &lt;a href="https://developers.redhat.com/blog/2018/12/04/xml-language-server-vscode-extension/" target="_blank" rel="noopener noreferrer"&gt;Red Hat’s XML language server&lt;/a&gt;, which was migrated to the Eclipse Foundation under a new project name: &lt;a href="https://projects.eclipse.org/projects/technology.lemminx" target="_blank" rel="noopener noreferrer"&gt;Eclipse LemMinX&lt;/a&gt; (a reference to the &lt;a href="https://en.wikipedia.org/wiki/Lemmings_(video_game)" target="_blank" rel="noopener noreferrer"&gt;Lemmings video game&lt;/a&gt;). The Eclipse LemMinX project is arguably the most feature-rich XML language server available. Its migration opens more doors for future development and utilization. In addition, shortly after its migration, the Eclipse LemMinX project and Red Hat also released updates: Eclipse LemMinX version 0.11.1 and the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-xml"&gt;Red Hat VS Code XML extension&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Eclipse LemMinX version 0.11.1&lt;/h2&gt; &lt;p&gt;Eclipse LemMinX version 0.11.1 mainly focuses on bug fixes that are &lt;a href="https://github.com/eclipse/lemminx/blob/master/CHANGELOG.md" target="_blank" rel="noopener noreferrer"&gt;outlined in the changelog here&lt;/a&gt;. For some history, Eclipse LemMinX started as an open source project created by &lt;a href="https://twitter.com/angelozerr" target="_blank" rel="noopener noreferrer"&gt;Angelo ZERR&lt;/a&gt; in mid-2018. Angelo’s XML language server implementation was well ahead of the game in terms of features and code infrastructure. As Red Hat’s interest in an XML language server continued to grow, Red Hat joined forces with Angelo (who later officially joined Red Hat as a senior software engineer) to create the most feature-rich and easy-to-use XML language server possible.&lt;/p&gt; &lt;p&gt;Thanks to the XML language server’s popularity and functionality, clients like Eclipse (with Wild Web Developer), VS Code (with XML Language Support by Red Hat), and Vim/Neovim (with &lt;code&gt;coc-xml&lt;/code&gt;) started consuming the XML language server. In addition, all LSP features (completion, validation, quick fix, etc.) provided by the XML language server are easily extensible. This helped motivate other projects to extend the LSP features, instead of implementing them themselves from scratch.&lt;/p&gt; &lt;p&gt;For example, there are extensions specific for Maven and Liferay. The Maven extension extends the completion feature to manage advanced dependency completion, and the Liferay extension extends the hover feature to fit specific use cases. We hope that the contribution to the Eclipse Foundation facilitates easier consumption from related projects and attracts new contributors beyond people from Red Hat.&lt;/p&gt; &lt;h2&gt;Red Hat VS Code XML extension&lt;/h2&gt; &lt;p&gt;In addition, we released the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-xml" target="_blank" rel="noopener noreferrer"&gt;Red Hat VS Code XML extension&lt;/a&gt; (which, of course, consumes the Eclipse LemMinX XML language server to provide language features). This extension provides an excellent all-in-one package for editing XML, XSD, and DTD files in VS Code, but what makes this extension stand out is the support for XSD and DTD schema validation for XML files.&lt;/p&gt; &lt;p&gt;This new release also focussed on bug fixes, which are &lt;a href="https://github.com/redhat-developer/vscode-xml/blob/master/CHANGELOG.md" target="_blank" rel="noopener noreferrer"&gt;outlined in the changelog here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#038;title=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" data-a2a-url="https://developers.redhat.com/blog/2020/03/27/red-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension/" data-a2a-title="Red Hat XML language server becomes LemMinX, bringing new release and updated VS Code XML extension"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/27/red-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension/"&gt;Red Hat XML language server becomes LemMinX, bringing new release and updated VS Code XML extension&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/__M7AW5kpqo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;A new era has begun for Red Hat’s XML language server, which was migrated to the Eclipse Foundation under a new project name: Eclipse LemMinX (a reference to the Lemmings video game). The Eclipse LemMinX project is arguably the most feature-rich XML language server available. Its migration opens more doors for future development and utilization. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/27/red-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension/"&gt;Red Hat XML language server becomes LemMinX, bringing new release and updated VS Code XML extension&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">699007</post-id><dc:creator>David Kwon</dc:creator><dc:date>2020-03-27T07:00:40Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/27/red-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension/</feedburner:origLink></entry><entry><title>Static analysis in GCC 10</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TDcC4qlLEHs/" /><category term="C" /><category term="Open source" /><category term="Security" /><category term="compiler" /><category term="double-free" /><category term="Fedora" /><category term="gcc" /><category term="GNU Compiler Collection" /><author><name>David Malcolm</name></author><id>https://developers.redhat.com/blog/?p=689087</id><updated>2020-03-26T07:00:33Z</updated><published>2020-03-26T07:00:33Z</published><content type="html">&lt;p&gt;I work at Red Hat on &lt;a href="https://gcc.gnu.org/"&gt;GCC, the GNU Compiler Collection&lt;/a&gt;. For the next major release of GCC, &lt;a href="https://gcc.gnu.org/gcc-10/changes.html" target="_blank" rel="noopener noreferrer"&gt;GCC 10&lt;/a&gt;, I&amp;#8217;ve been implementing a new &lt;code&gt;-fanalyzer&lt;/code&gt; option: A static analysis pass to identify various problems at compile-time, rather than at runtime.&lt;/p&gt; &lt;p&gt;My thinking here is that it&amp;#8217;s best to catch problems as early as possible as the code is written, using the compiler the code is written in as part of the compile-edit-debug cycle, rather than having static analysis as an extra tool &amp;#8220;on the side&amp;#8221; (perhaps proprietary). Hence, it seems worthwhile to have a static analyzer built into the compiler that can see exactly the same code as the compiler sees—because it &lt;i&gt;is&lt;/i&gt; the compiler.&lt;/p&gt; &lt;p&gt;&lt;span id="more-689087"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This issue is, of course, a huge problem to tackle. For this release, I&amp;#8217;ve focused on the kinds of problems seen in C code—and, in particular &lt;a href="https://cwe.mitre.org/data/definitions/415.html" target="_blank" rel="noopener noreferrer"&gt;double-free bugs&lt;/a&gt;—but with a view toward creating a framework that we can expand on in subsequent releases (when we can add more checks and support languages other than C).&lt;/p&gt; &lt;p&gt;My hope is that the analyzer provides a decent amount of extra checking while not being too expensive. I&amp;#8217;ve aimed for &lt;code&gt;-fanalyzer&lt;/code&gt; to &amp;#8220;merely&amp;#8221; double the compile time as a reasonable trade-off for the extra checks. I haven&amp;#8217;t succeeded yet, as you&amp;#8217;ll see below, but I&amp;#8217;m working on it.&lt;/p&gt; &lt;p&gt;Right now the code is in GCC&amp;#8217;s master branch for GCC 10 and can be tried out on &lt;a href="http://godbolt.org/" target="_blank" rel="noopener noreferrer"&gt;Compiler Explorer, aka godbolt.org&lt;/a&gt;. It works well for small and medium-sized examples, but there are bugs that mean it&amp;#8217;s not ready for production use. I&amp;#8217;m working hard on fixing things in the hope that the feature will be meaningfully usable for C code by the time of GCC 10&amp;#8217;s release (likely in April).&lt;/p&gt; &lt;h2&gt;Diagnostic paths&lt;/h2&gt; &lt;p&gt;Here&amp;#8217;s the simplest possible example of a double-free bug:&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdlib.h&amp;#62;&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;test&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;ptr) { free(ptr); free(ptr); } &lt;/pre&gt; &lt;/div&gt; &lt;p&gt;GCC 10 with &lt;code&gt;-fanalyzer&lt;/code&gt; reports it as follows:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer double-free-1.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;double-free-1.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;double-free-1.c:6:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;double-‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;ptr&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-415&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-double-free&lt;/span&gt;&lt;/span&gt;] 6 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;free(ptr)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~~~~~~~~&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: events 1-2 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 5 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;free(ptr)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; first ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 6 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;free(ptr)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; second ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ here; first ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ was at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;This response shows that GCC has learned some new tricks; first, the ability for diagnostics to have &lt;a href="https://cwe.mitre.org/" target="_blank" rel="noopener noreferrer"&gt;Common Weakness Enumeration (CWE) identifiers&lt;/a&gt;. In this example, the double-free diagnostic is tagged with &lt;a href="https://cwe.mitre.org/data/definitions/415.html"&gt;CWE-415&lt;/a&gt;. This tag hopefully makes the output more clear, improves precision, and gives you something simple to type into search engines. So far, only diagnostics from &lt;code&gt;-fanalyzer&lt;/code&gt; have been tagged with CWE weakness identifiers.&lt;/p&gt; &lt;p&gt;If you&amp;#8217;re using GCC 10 with a suitable terminal (e.g. recent gnome-terminal), the CWE identifier is a clickable hyperlink, taking you to a &lt;a href="https://cwe.mitre.org/data/definitions/415.html" target="_blank" rel="noopener noreferrer"&gt;description of the problem&lt;/a&gt;. Speaking of hyperlinks, for many releases, when GCC emits a warning it prints the option controlling that warning. As of GCC 10, that option text is now a clickable hyperlink (again, assuming a &lt;a href="https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda" target="_blank" rel="noopener noreferrer"&gt;sufficiently capable terminal&lt;/a&gt;), which should take you to the documentation for that option (for any warning, not just the ones relating to the analyzer).&lt;/p&gt; &lt;p&gt;Second, GCC diagnostics can now have a chain of events associated with them, describing a path through the code that triggers the problem. Given the lack of control flow in the above example, it has just two events, but you can see how the second event refers to the first event in its description.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a more involved example. Can you see the issue in the following code? (Hint: It&amp;#8217;s not a double-free this time):&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;setjmp.h&amp;#62;&lt;/span&gt; &lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdlib.h&amp;#62;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;static&lt;/span&gt; &lt;span style="color: #b00040;"&gt;jmp_buf&lt;/span&gt; env; &lt;span style="color: #008000; font-weight: bold;"&gt;static&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;inner&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;void&lt;/span&gt;) { longjmp(env, &lt;span style="color: #666666;"&gt;1&lt;/span&gt;); } &lt;span style="color: #008000; font-weight: bold;"&gt;static&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;middle&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;void&lt;/span&gt;) { &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;ptr &lt;span style="color: #666666;"&gt;=&lt;/span&gt; malloc(&lt;span style="color: #666666;"&gt;1024&lt;/span&gt;); inner(); free(ptr); } &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;outer&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;void&lt;/span&gt;) { &lt;span style="color: #b00040;"&gt;int&lt;/span&gt; i; i &lt;span style="color: #666666;"&gt;=&lt;/span&gt; setjmp(env); &lt;span style="color: #008000; font-weight: bold;"&gt;if&lt;/span&gt; (i &lt;span style="color: #666666;"&gt;==&lt;/span&gt; &lt;span style="color: #666666;"&gt;0&lt;/span&gt;) middle(); } &lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Here&amp;#8217;s what GCC&amp;#8217;s &lt;code&gt;-fanalyzer&lt;/code&gt; reports, which shows the interprocedural control flow via ASCII art:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer longjmp-demo.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;leak of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;ptr&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-401&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-malloc-leak&lt;/span&gt;&lt;/span&gt;] 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;longjmp(env, 1)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’: event 1 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 18 | void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;outer&lt;/span&gt;&lt;/span&gt;(void) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’: event 2 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 22 | i = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;setjmp&lt;/span&gt;&lt;/span&gt;(env); &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;setjmp&lt;/span&gt;’ called here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’: events 3-5 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 23 | if &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(&lt;/span&gt;&lt;/span&gt;i == 0) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(3)&lt;/span&gt;&lt;/span&gt; following ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;true&lt;/span&gt;’ branch (when ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;i == 0&lt;/span&gt;’)... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 24 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;middle()&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(4)&lt;/span&gt;&lt;/span&gt; ...to here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(5)&lt;/span&gt;&lt;/span&gt; calling ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;middle&lt;/span&gt;’ from ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;+--&amp;#62; &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;middle&lt;/span&gt;’: events 6-8 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 11 | static void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;middle&lt;/span&gt;&lt;/span&gt;(void) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(6)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;middle&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 12 | { &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 13 | void *ptr = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;malloc(1024)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(7)&lt;/span&gt;&lt;/span&gt; allocated here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 14 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;inner()&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(8)&lt;/span&gt;&lt;/span&gt; calling ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’ from ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;middle&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;+--&amp;#62; &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’: events 9-11 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 6 | static void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;inner&lt;/span&gt;&lt;/span&gt;(void) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(9)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 7 | { &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;longjmp(env, 1)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(10)&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;ptr&lt;/span&gt;’ leaks here; was allocated at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(7)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(11)&lt;/span&gt;&lt;/span&gt; rewinding from ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp&lt;/span&gt;’ in ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;&amp;#60;-------------+&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’: event 12 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 22 | i = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;setjmp&lt;/span&gt;&lt;/span&gt;(env); &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(12)&lt;/span&gt;&lt;/span&gt; ...to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;setjmp&lt;/span&gt;’ in ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’ (saved at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt;) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;The above is rather verbose, though perhaps it needs to be to convey what&amp;#8217;s going on, given the use of &lt;code&gt;setjmp&lt;/code&gt; and &lt;code&gt;longjmp&lt;/code&gt;. I hope the description is reasonably clear: There&amp;#8217;s a memory leak that occurs when the call to &lt;code&gt;longjmp&lt;/code&gt; unwinds the stack back to &lt;code&gt;outer&lt;/code&gt; past the cleanup point in &lt;code&gt;middle&lt;/code&gt;, without invoking the cleanup.&lt;/p&gt; &lt;p&gt;If you don&amp;#8217;t like the ASCII art above, you can view the events as separate &amp;#8220;note&amp;#8221; diagnostics with &lt;code&gt;-fdiagnostics-path-format=separate-events&lt;/code&gt;:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer -fdiagnostics-path-format=separate-events longjmp-demo.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;leak of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;ptr&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-401&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-malloc-leak&lt;/span&gt;&lt;/span&gt;] 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;longjmp(env, 1)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:18:6:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (1)&lt;/span&gt;&lt;/span&gt; entry to ‘outer’ 18 | void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;outer&lt;/span&gt;&lt;/span&gt;(void) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~&lt;/span&gt;&lt;/span&gt; In file included from &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:1&lt;/span&gt;: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:22:7:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (2)&lt;/span&gt;&lt;/span&gt; ‘setjmp’ called here 22 | i = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;setjmp&lt;/span&gt;&lt;/span&gt;(env); | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:23:6:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (3)&lt;/span&gt;&lt;/span&gt; following ‘true’ branch (when ‘i == 0’)... 23 | if &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(&lt;/span&gt;&lt;/span&gt;i == 0) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:24:5:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (4)&lt;/span&gt;&lt;/span&gt; ...to here 24 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;middle()&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:24:5:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (5)&lt;/span&gt;&lt;/span&gt; calling ‘middle’ from ‘outer’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:11:13:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (6)&lt;/span&gt;&lt;/span&gt; entry to ‘middle’ 11 | static void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;middle&lt;/span&gt;&lt;/span&gt;(void) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:13:15:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (7)&lt;/span&gt;&lt;/span&gt; allocated here 13 | void *ptr = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;malloc(1024)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:14:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (8)&lt;/span&gt;&lt;/span&gt; calling ‘inner’ from ‘middle’ 14 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;inner()&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:6:13:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (9)&lt;/span&gt;&lt;/span&gt; entry to ‘inner’ 6 | static void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;inner&lt;/span&gt;&lt;/span&gt;(void) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (10)&lt;/span&gt;&lt;/span&gt; ‘ptr’ leaks here; was allocated at (7) 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;longjmp(env, 1)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (11)&lt;/span&gt;&lt;/span&gt; rewinding from ‘longjmp’ in ‘inner’... In file included from &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:1&lt;/span&gt;: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:22:7:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (12)&lt;/span&gt;&lt;/span&gt; ...to ‘setjmp’ in ‘outer’ (saved at (2)) 22 | i = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;setjmp&lt;/span&gt;&lt;/span&gt;(env); | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;or turn them off altogether with &lt;code&gt;-fdiagnostics-path-format=none&lt;/code&gt;. There&amp;#8217;s also a JSON output format.&lt;/p&gt; &lt;p&gt;All of the new diagnostics have a &lt;code&gt;-Wanalyzer-SOMETHING&lt;/code&gt; name: We&amp;#8217;ve already seen &lt;code&gt;-Wanalyzer-double-free&lt;/code&gt; and &lt;code&gt;-Wanalyzer-malloc-leak&lt;/code&gt; above. These diagnostics are all enabled when &lt;code&gt;-fanalyzer&lt;/code&gt; is enabled, but they can be selectively disabled via the &lt;code&gt;-Wno-analyzer-SOMETHING&lt;/code&gt; variants (e.g., via pragmas).&lt;/p&gt; &lt;h2&gt;What are the new warnings?&lt;/h2&gt; &lt;p&gt;As well as double-free detection, there are checks for &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;fopen&lt;/code&gt; leaks:&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdio.h&amp;#62;&lt;/span&gt; &lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdlib.h&amp;#62;&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;test&lt;/span&gt;(&lt;span style="color: #008000; font-weight: bold;"&gt;const&lt;/span&gt; &lt;span style="color: #b00040;"&gt;char&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;filename) { &lt;span style="color: #b00040;"&gt;FILE&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;f &lt;span style="color: #666666;"&gt;=&lt;/span&gt; fopen(filename, &lt;span style="color: #ba2121;"&gt;"r"&lt;/span&gt;); &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;p &lt;span style="color: #666666;"&gt;=&lt;/span&gt; malloc(&lt;span style="color: #666666;"&gt;1024&lt;/span&gt;); &lt;span style="color: #408080; font-style: italic;"&gt;/* do stuff */&lt;/span&gt; } &lt;/pre&gt; &lt;/div&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer leak.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;leak.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;leak.c:9:1:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;leak of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;p&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-401&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-malloc-leak&lt;/span&gt;&lt;/span&gt;] 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;}&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: events 1-2 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 7 | void *p = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;malloc(1024)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; allocated here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 8 | /* do stuff */ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;p&lt;/span&gt;’ leaks here; was allocated at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;leak.c:9:1:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;leak of FILE ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;f&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-775&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-file-leak&lt;/span&gt;&lt;/span&gt;] 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;}&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: events 1-2 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 6 | FILE *f = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;fopen(filename, "r")&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; opened here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt;...... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;f&lt;/span&gt;’ leaks here; was opened at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;For using memory after it has been freed:&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdlib.h&amp;#62;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;struct&lt;/span&gt; link { &lt;span style="color: #008000; font-weight: bold;"&gt;struct&lt;/span&gt; link &lt;span style="color: #666666;"&gt;*&lt;/span&gt;next; }; &lt;span style="color: #b00040;"&gt;int&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;free_a_list_badly&lt;/span&gt;(&lt;span style="color: #008000; font-weight: bold;"&gt;struct&lt;/span&gt; link &lt;span style="color: #666666;"&gt;*&lt;/span&gt;n) { &lt;span style="color: #008000; font-weight: bold;"&gt;while&lt;/span&gt; (n) { free(n); n &lt;span style="color: #666666;"&gt;=&lt;/span&gt; n&lt;span style="color: #666666;"&gt;-&amp;#62;&lt;/span&gt;next; } } &lt;/pre&gt; &lt;/div&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer use-after-free.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;use-after-free.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free_a_list_badly&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;use-after-free.c:9:7:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;use after ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;n&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-416&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-use-after-free&lt;/span&gt;&lt;/span&gt;] 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;n = n-&amp;#62;next&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;~~^~~~~~~~~&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free_a_list_badly&lt;/span&gt;’: events 1-4 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 7 | while &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(&lt;/span&gt;&lt;/span&gt;n) { &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; following ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;true&lt;/span&gt;’ branch (when ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;n&lt;/span&gt;’ is non-NULL)... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;free(n)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; ...to here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(3)&lt;/span&gt;&lt;/span&gt; freed here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;n = n-&amp;#62;next&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(4)&lt;/span&gt;&lt;/span&gt; use after ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;n&lt;/span&gt;’; freed at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(3)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;For freeing a non-heap pointer:&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdlib.h&amp;#62;&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;test&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;int&lt;/span&gt; n) { &lt;span style="color: #b00040;"&gt;int&lt;/span&gt; buf[&lt;span style="color: #666666;"&gt;10&lt;/span&gt;]; &lt;span style="color: #b00040;"&gt;int&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;ptr; &lt;span style="color: #008000; font-weight: bold;"&gt;if&lt;/span&gt; (n &lt;span style="color: #666666;"&gt;&amp;#60;&lt;/span&gt; &lt;span style="color: #666666;"&gt;10&lt;/span&gt;) ptr &lt;span style="color: #666666;"&gt;=&lt;/span&gt; buf; &lt;span style="color: #008000; font-weight: bold;"&gt;else&lt;/span&gt; ptr &lt;span style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span style="color: #b00040;"&gt;int&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;)malloc(&lt;span style="color: #008000; font-weight: bold;"&gt;sizeof&lt;/span&gt; (&lt;span style="color: #b00040;"&gt;int&lt;/span&gt;) &lt;span style="color: #666666;"&gt;*&lt;/span&gt; n); &lt;span style="color: #408080; font-style: italic;"&gt;/* do stuff. */&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;/* oops; this free should be conditionalized. */&lt;/span&gt; free(ptr); } &lt;/pre&gt; &lt;/div&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer heap-vs-stack.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;heap-vs-stack.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;heap-vs-stack.c:16:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;ptr&lt;/span&gt;’ which points to memory not on the heap [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-590&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-free-of-non-heap&lt;/span&gt;&lt;/span&gt;] 16 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;free(ptr)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~~~~~~~~&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: events 1-4 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 8 | if &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(&lt;/span&gt;&lt;/span&gt;n &amp;#60; 10) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; following ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;true&lt;/span&gt;’ branch (when ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;n &amp;#60;= 9&lt;/span&gt;’)... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;ptr = buf&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; ...to here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(3)&lt;/span&gt;&lt;/span&gt; pointer is from here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt;...... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 16 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;free(ptr)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(4)&lt;/span&gt;&lt;/span&gt; call to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;For using a function that&amp;#8217;s known to be unsafe to use inside a signal handler:&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdio.h&amp;#62;&lt;/span&gt; &lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;signal.h&amp;#62;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;extern&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;body_of_program&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;void&lt;/span&gt;); &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;custom_logger&lt;/span&gt;(&lt;span style="color: #008000; font-weight: bold;"&gt;const&lt;/span&gt; &lt;span style="color: #b00040;"&gt;char&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;msg) { fprintf(stderr, &lt;span style="color: #ba2121;"&gt;"LOG: %s"&lt;/span&gt;, msg); } &lt;span style="color: #008000; font-weight: bold;"&gt;static&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;handler&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;int&lt;/span&gt; signum) { custom_logger(&lt;span style="color: #ba2121;"&gt;"got signal"&lt;/span&gt;); } &lt;span style="color: #b00040;"&gt;int&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;main&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;int&lt;/span&gt; argc, &lt;span style="color: #008000; font-weight: bold;"&gt;const&lt;/span&gt; &lt;span style="color: #b00040;"&gt;char&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;argv) { custom_logger(&lt;span style="color: #ba2121;"&gt;"started"&lt;/span&gt;); signal(SIGINT, handler); body_of_program(); custom_logger(&lt;span style="color: #ba2121;"&gt;"stopped"&lt;/span&gt;); &lt;span style="color: #008000; font-weight: bold;"&gt;return&lt;/span&gt; &lt;span style="color: #666666;"&gt;0&lt;/span&gt;; } &lt;/pre&gt; &lt;/div&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer signal.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;signal.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;custom_logger&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;signal.c:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;call to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;fprintf&lt;/span&gt;’ from within signal handler [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-479&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-unsafe-call-within-signal-handler&lt;/span&gt;&lt;/span&gt;] 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;fprintf(stderr, "LOG: %s", msg)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;main&lt;/span&gt;’: events 1-2 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 16 | int &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;main&lt;/span&gt;&lt;/span&gt;(int argc, const char *argv) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;main&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt;...... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 20 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;signal(SIGINT, handler)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; registering ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;handler&lt;/span&gt;’ as signal handler &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; event 3 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;cc1:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(3)&lt;/span&gt;&lt;/span&gt;: later on, when the signal is delivered to the process &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;+--&amp;#62; &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;handler&lt;/span&gt;’: events 4-5 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 11 | static void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;handler&lt;/span&gt;&lt;/span&gt;(int signum) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(4)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;handler&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 12 | { &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 13 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;custom_logger("got signal")&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(5)&lt;/span&gt;&lt;/span&gt; calling ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;custom_logger&lt;/span&gt;’ from ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;handler&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;+--&amp;#62; &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;custom_logger&lt;/span&gt;’: events 6-7 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 6 | void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;custom_logger&lt;/span&gt;&lt;/span&gt;(const char *msg) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(6)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;custom_logger&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 7 | { &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;fprintf(stderr, "LOG: %s", msg)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(7)&lt;/span&gt;&lt;/span&gt; call to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;fprintf&lt;/span&gt;’ from within signal handler &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;Along with &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Static-Analyzer-Options.html" target="_blank" rel="noopener noreferrer"&gt;other warnings&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s left to do?&lt;/h2&gt; &lt;p&gt;As it stands, the checker works well on small- and medium-sized examples, but there are two problem areas I&amp;#8217;m running into as I scale it up to real-world C code. First, there are bugs in my state-management code. Within the checker are classes for describing program state in an abstract way. The checker explores the program, building a directed graph of (point, state) pairs with logic for simplifying state and merging state at control flow join-points.&lt;/p&gt; &lt;p&gt;In theory, if the state gets too complicated, the checker is meant to go into a least-defined state, but there are bugs with this approach that lead to the number of states at a given point exploding, which then leads to the checker running slowly, eventually hitting a safety limit, and not fully exploring the program. To fix this, I&amp;#8217;ve been rewriting the guts of the state-management code. I hope to land the rewrite in &amp;#8220;master&amp;#8221; next week.&lt;/p&gt; &lt;p&gt;Second, even if we do fully explore the program, the paths through the code generated by &lt;code&gt;-fanalyzer&lt;/code&gt; are sometimes ludicrously verbose. The worst I&amp;#8217;ve seen is a 110-event path for the use of uninitialized data reported when compiling GCC itself. I think this one was a false positive, but clearly it&amp;#8217;s unreasonable to expect users to wade through something like that.&lt;/p&gt; &lt;p&gt;The analyzer tries to find the shortest feasible path through the (point, state) graph, generates a chain of events from it, and then tries to simplify the chain. Effectively, it&amp;#8217;s applying a series of peephole optimizations to the chain of events to come up with a minimal chain that expresses the problem.&lt;/p&gt; &lt;p&gt;I recently implemented a way of filtering irrelevant control-flow edges from the path, which ought to help, and I&amp;#8217;m working on a similar patch to eliminate redundant interprocedural edges.&lt;/p&gt; &lt;p&gt;To give a concrete example, I tried the analyzer on a real bug (albeit one from fifteen years ago)—&lt;a href="https://access.redhat.com/security/cve/cve-2005-1689" target="_blank" rel="noopener noreferrer"&gt;CVE-2005-1689&lt;/a&gt;, a double-free vulnerability in krb5 1.4.1. It correctly identifies the bug with no false positives, but the output is currently 170 lines of stderr. Rather than showing the output inline here, you can see it at &lt;a href="https://dmalcolm.fedorapeople.org/gcc/2020-02-28/recvauth.c.html" target="_blank" rel="noopener noreferrer"&gt;this link&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Initially, the above was 1187 lines of stderr. I fixed various bugs and implemented more simplifications to get it down to 170 lines. Part of the problem is that the &lt;code&gt;free&lt;/code&gt; is being done through a &lt;code&gt;krb5_xfree&lt;/code&gt; macro and the path-printing code shows how each macro is expanded each time an event occurs within a macro. Perhaps the output should only show each macro expansion once per diagnostic. Also, the first few events in each diagnostic are interprocedural logic that&amp;#8217;s not really relevant to the user (I&amp;#8217;m working on a fix for that). With these changes, the output should be considerably shorter.&lt;/p&gt; &lt;p&gt;Perhaps a better interface might write out a separate HTML file, one per warning, and emit a &amp;#8220;note&amp;#8221; giving the location of the additional information?&lt;/p&gt; &lt;p&gt;I want to give the end-user enough information to act on a warning, but without overwhelming them. Are there better ways of presenting this? Let me know in the comments.&lt;/p&gt; &lt;h2&gt;Trying it out&lt;/h2&gt; &lt;p&gt;GCC 10 will be in Fedora 32, which should be out in a couple of months.&lt;/p&gt; &lt;p&gt;For simple code examples, you can play around with the new GCC online at &lt;a href="https://godbolt.org/" target="_blank" rel="noopener noreferrer"&gt;godbolt.org&lt;/a&gt; (select gcc &amp;#8220;trunk&amp;#8221; and add &lt;code&gt;-fanalyzer&lt;/code&gt; to the compiler options).&lt;/p&gt; &lt;p&gt;Have fun!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#038;title=Static%20analysis%20in%20GCC%2010" data-a2a-url="https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/" data-a2a-title="Static analysis in GCC 10"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/"&gt;Static analysis in GCC 10&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TDcC4qlLEHs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I work at Red Hat on GCC, the GNU Compiler Collection. For the next major release of GCC, GCC 10, I&amp;#8217;ve been implementing a new -fanalyzer option: A static analysis pass to identify various problems at compile-time, rather than at runtime. My thinking here is that it&amp;#8217;s best to catch problems as early as possible [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/"&gt;Static analysis in GCC 10&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">689087</post-id><dc:creator>David Malcolm</dc:creator><dc:date>2020-03-26T07:00:33Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/</feedburner:origLink></entry><entry><title>Learn DMN in 15 minutes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cB4qkVqR2kA/learn-dmn-in-15-minutes.html" /><category term="feed_group_name_drools" scheme="searchisko:content:tags" /><category term="feed_name_drools" scheme="searchisko:content:tags" /><author><name>Unknown</name></author><id>searchisko:content:id:jbossorg_blog-learn_dmn_in_15_minutes</id><updated>2020-03-25T21:54:45Z</updated><published>2020-03-25T21:53:00Z</published><content type="html">&lt;p&gt;Today we have a new announcement for new DMN users: the &lt;a href="http://learn-dmn-in-15-minutes.com"&gt;learn-dmn-in-15-minutes.com&lt;/a&gt; course!&lt;/p&gt; &lt;p&gt;DMN is already simple and easy to understand at first glance. However, new adopters generally want to check a quick overview and learn about the most important parts, before jumping on a more in-depth journey. That's the goal of this course!&lt;/p&gt; &lt;p&gt;Now newcomers can: &lt;li&gt;Learn DMN in 15 minutes&lt;/li&gt; &lt;li&gt;Quickly create a DMN model on &lt;a href="http://dmn.new"&gt;dmn.new&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Execute their first decision model on &lt;a href="https://kogito.kie.org"&gt;kogito.kie.org&lt;/a&gt;&lt;/li&gt;&lt;/p&gt; &lt;a href="https://1.bp.blogspot.com/-voxwROPCX9k/XnvSmY1R3_I/AAAAAAAAC8M/BAVvMg_dX-IV0oKupDOSP5M0gRaLy7xRgCLcBGAsYHQ/s1600/learn-dmn.png" imageanchor="1" &gt;&lt;img border="0" src="https://1.bp.blogspot.com/-voxwROPCX9k/XnvSmY1R3_I/AAAAAAAAC8M/BAVvMg_dX-IV0oKupDOSP5M0gRaLy7xRgCLcBGAsYHQ/s1600/learn-dmn.png" data-original-width="1600" width="100%" data-original-height="998" /&gt;&lt;/a&gt; &lt;p&gt;Stay tuned for new content! &lt;/p&gt; &lt;div class="feedflare"&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=LvPVIIBd_qM:v85UVbSpxgg:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:dnMXMwOfBR0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=dnMXMwOfBR0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=LvPVIIBd_qM:v85UVbSpxgg:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=LvPVIIBd_qM:v85UVbSpxgg:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:jWeZv7XsJd0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=jWeZv7XsJd0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/DroolsAtom/~4/LvPVIIBd_qM" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cB4qkVqR2kA" height="1" width="1" alt=""/&gt;</content><summary>Today we have a new announcement for new DMN users: the learn-dmn-in-15-minutes.com course! DMN is already simple and easy to understand at first glance. However, new adopters generally want to check a quick overview and learn about the most important parts, before jumping on a more in-depth journey. That's the goal of this course! Now newcomers can: Learn DMN in 15 minutes Quickly create a DMN mo...</summary><dc:creator>Unknown</dc:creator><dc:date>2020-03-25T21:53:00Z</dc:date><feedburner:origLink>http://feeds.athico.com/~r/DroolsAtom/~3/LvPVIIBd_qM/learn-dmn-in-15-minutes.html</feedburner:origLink></entry><entry><title>Best Practices for Middleware and Integration Architecture Modernization with Apache Camel</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/IeOOh_q1ZVU/best-practices-for-middleware-and.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="Presentation" scheme="searchisko:content:tags" /><category term="video" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-best_practices_for_middleware_and_integration_architecture_modernization_with_apache_camel</id><updated>2020-03-25T08:36:32Z</updated><published>2020-03-25T08:36:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Yesterday I gave the following virtual talk at the &lt;a href="https://www.meetup.com/Stockholm-FullStack-SecDevOps-Engineering-Meetup/events/269204017/"&gt;Stockholm Meetup&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Best Practices for Middleware and Integration Architecture Modernization with Apache Camel&lt;/b&gt;&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;What are important considerations when modernizing middleware and moving towards serverless and/or cloud native integration architectures? How can we make the most of flexible technologies such as Camel K, Kafka, Quarkus and OpenShift. Claus is working as project lead on Apache Camel and has extensive experience from open source product development.&lt;/blockquote&gt;I thank the organizers Forefront Consulting for inviting me. Unfortunately there was a glitch with the talk yesterday. As I could not be in person then the talk was pre-recorded and was cut half way. So I promised to post a blog today and upload the talk to &lt;a href="https://www.youtube.com/watch?v=d1Hr78a7Lww"&gt;youtube&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe width="320" height="266" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/d1Hr78a7Lww/0.jpg" src="https://www.youtube.com/embed/d1Hr78a7Lww?feature=player_embedded" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;The title and abstract of the talk was somewhat given to me, and so was the session length of 30 minutes. As I am so heavily invested in Apache Camel, then I focused the talk about Camel and its evolution over the last 10 years as introduction and then using the latest innovations from Camel K, Camel Quarkus and Camel Kafka Connectors as the meat of the talk, and with 3 demos.&lt;br /&gt;&lt;br /&gt;The talk can be &lt;a href="https://www.youtube.com/watch?v=d1Hr78a7Lww"&gt;watched on youtube&lt;/a&gt; and the &lt;a href="https://www.slideshare.net/davsclaus/best-practices-for-middleware-and-integration-architecture-modernization-with-apache-camel"&gt;slides are here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=MINg7l5P6bI:FYmxgJw9T_c:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=MINg7l5P6bI:FYmxgJw9T_c:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=MINg7l5P6bI:FYmxgJw9T_c:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=MINg7l5P6bI:FYmxgJw9T_c:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=MINg7l5P6bI:FYmxgJw9T_c:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=MINg7l5P6bI:FYmxgJw9T_c:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=MINg7l5P6bI:FYmxgJw9T_c:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/MINg7l5P6bI" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/IeOOh_q1ZVU" height="1" width="1" alt=""/&gt;</content><summary>Yesterday I gave the following virtual talk at the Stockholm Meetup. Best Practices for Middleware and Integration Architecture Modernization with Apache Camel What are important considerations when modernizing middleware and moving towards serverless and/or cloud native integration architectures? How can we make the most of flexible technologies such as Camel K, Kafka, Quarkus and OpenShift. Clau...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-03-25T08:36:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/MINg7l5P6bI/best-practices-for-middleware-and.html</feedburner:origLink></entry></feed>
